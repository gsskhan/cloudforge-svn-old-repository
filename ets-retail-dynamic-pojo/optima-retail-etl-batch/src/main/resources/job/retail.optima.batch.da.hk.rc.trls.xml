<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:p="http://www.springframework.org/schema/p" xmlns:c="http://www.springframework.org/schema/c"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:batch="http://www.springframework.org/schema/batch" xmlns:util="http://www.springframework.org/schema/util"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
		http://www.springframework.org/schema/beans/spring-beans-2.5.xsd
		http://www.springframework.org/schema/util 
		http://www.springframework.org/schema/util/spring-util-2.5.xsd
		http://www.springframework.org/schema/context
		http://www.springframework.org/schema/context/spring-context.xsd
		http://www.springframework.org/schema/batch 
		http://www.springframework.org/schema/batch/spring-batch-2.1.xsd
		http://www.springframework.org/schema/aop
 		http://www.springframework.org/schema/aop/spring-aop-2.5.xsd">
 		
 		<!-- *********************************************** HK RC JOB Configuration =START ***************************************************** -->

	<batch:job id="DA-HK-RC-BATCH" job-repository="jobRepository" restartable="true" incrementer="jobParamIncrementer">
		<batch:step id="springStart" next="registerPreprocessLoaderStep">
			<batch:tasklet ref="timerTaskletBegin" />
		</batch:step>
		<batch:step id="registerPreprocessLoaderStep" next="fxrateProcessStep">
			<batch:tasklet ref="hkRcRegisterPreprocessLoader" />
		</batch:step>
		<batch:step id="fxrateProcessStep" parent="fxrateDataProcessStep"
                     next="hkRcCbFinanceDataProcessStep" />
         <batch:step id="hkRcCbFinanceDataProcessStep" parent="cbFinanceDataProcessStep" next="ficoProcessStep" />
		<batch:step id="ficoProcessStep" parent="hkRcFicoPrepropStep:master"
			next="newCommitProcessStep" />
		<batch:step id="newCommitProcessStep" parent="hkRcNewCommitPrepropStep:master"
			next="delqProcessStep" /> 
		<batch:step id="delqProcessStep" parent="hkRcDelqPrepropStep:master"
			next="woProcessStep" />	
		<batch:step id="woProcessStep" parent="hkRcWoPrepropStep:master"
			next="recvProcessStep" />
		<batch:step id="recvProcessStep" parent="hkRcRecvPrepropStep:master"
			next="crdTransferProcessStep" />
		<batch:step id="crdTransferProcessStep" parent="hkRcCrdTransferPrepropStep:master"
			next="hkRcRainbowproccrDecider" />
 
		<batch:decision id="hkRcRainbowproccrDecider" decider="hkRcRainbowDeciderStep">
	        <batch:next on="preRainbow" to="hkRcPreRainbowproccrStep" />
	        <batch:next on="postRainbow" to="hkRcRainbowproccrStep" />
    	</batch:decision>    	
    	
		<batch:step id="hkRcPreRainbowproccrStep" parent="hkRcPreRainbowproccrStep:master"
			next="hkRcPreRainbowproccrAggregationStep" /> 		
 		<batch:step id="hkRcRainbowproccrStep" parent="hkRcRainbowproccrStep:master"
			next="hkRcRainbowproccrAggregationStep" />	
					
		<batch:step id="hkRcRainbowproccrAggregationStep" next="hkRcFileMergeStep" >
			<batch:tasklet ref="hkRcRainbowproccrAggregationResultsTasklet" />
		</batch:step>		
		<batch:step id="hkRcPreRainbowproccrAggregationStep" next="hkRcFileMergeStep" >
			<batch:tasklet ref="hkRcPreRainbowproccrAggregationResultsTasklet" />
		</batch:step>
		
		<batch:step id="hkRcFileMergeStep" next="endSpringStep" >
			<batch:tasklet ref="hkRcFileMergeTasklet" />
			<batch:listeners>
				<batch:listener ref="hkRcFileMergeTasklet"/>
			</batch:listeners>
		</batch:step>

		<batch:step id="endSpringStep">
			<batch:tasklet ref="timerTaskletEnd" />
		</batch:step>		
		<batch:listeners>
			<batch:listener ref="hkAcqGcbcJobListener" />
		</batch:listeners>
	</batch:job>

	<bean id="hkRcRainbowDeciderStep" 
		class="com.citi.retail.optima.etl.batch.decider.RainbowproccrDecider" >
		<property name="startDate">
			<bean factory-bean="dateFormat_yyyy-MM-dd" factory-method="parse">
				<constructor-arg value="2007-01-01" />
			</bean>
		</property>
		<property name="endDate">
			<bean factory-bean="dateFormat_yyyy-MM-dd" factory-method="parse">
				<constructor-arg value="2011-09-31" />
			</bean>
		</property>
	</bean>
	
	<bean id="hkAcqGcbcJobListener"
		class="com.citi.optima.retail.batch.listeners.DataAcqJobListener">
		<property name="batchJobInstanceDao" ref="jobInstanceDao" />
		<property name="internalMessageChannel" ref="batchCompletionHandlerChannel" />
		<property name="errorReportHandler">
			<bean class="com.citi.retail.optima.etl.batch.report.ErrorReportHandler" />
		</property>
		<property name="preProcessorFactory" ref="preProcessorDataServiceFactory" />
		<property name="dataServiceName" value="com.citi.optima.retail.batch.preprocess.HkDataServiceImpl" />
		<property name="jobConfigDao" ref="jobConfigDao" />
<!-- 		<property name="footerItemList" ref="rcFooterItemList" /> -->
	</bean>
	
 		
	<!-- *********************************************** HK RC JOB Configuration =END ***************************************************** -->
	<!-- *********************************************** Common Beans = START ***************************************************** -->
	
	<bean id="dateEditor"
		class="org.springframework.beans.propertyeditors.CustomDateEditor" scope="step">
		<constructor-arg>
			<bean class="java.text.SimpleDateFormat">
				<constructor-arg value="ddMMMyyyy" />
			</bean>
		</constructor-arg>
		<constructor-arg value="true" />
	</bean>
	
	<bean id="dateEditor1"
		class="org.springframework.beans.propertyeditors.CustomDateEditor" scope="step">
		<constructor-arg>
			<bean class="java.text.SimpleDateFormat">
				<constructor-arg value="mm/dd/yy" />
			</bean>
		</constructor-arg>
		<constructor-arg value="true" />
	</bean>
	
	<bean id="dateEditor2"
		class="org.springframework.beans.propertyeditors.CustomDateEditor" scope="step">
		<constructor-arg>
			<bean class="java.text.SimpleDateFormat">
				<constructor-arg value="yyyy-mm-dd" />
			</bean>
		</constructor-arg>
		<constructor-arg value="true" />
	</bean>
	
	
	<bean id="format_ddMMMyyyy" class="java.text.SimpleDateFormat" scope="prototype">
		<constructor-arg value="ddMMMyyyy" />
	</bean>
	
	<bean id="format_mm_dd_yy" class="java.text.SimpleDateFormat" scope="prototype">
		<constructor-arg value="mm/dd/yy" />
	</bean>
	
	<bean id="dateFormat_yyyy-MM-dd" class="java.text.SimpleDateFormat" scope="prototype">
		<constructor-arg value="yyyy-MM-dd" />
	</bean>
	
	<bean id="dateFormat_yyyymm" class="java.text.SimpleDateFormat" scope="prototype">
		<constructor-arg value="yyyymm" />
	</bean>
	<!-- *********************************************** Common Beans = END ***************************************************** -->
	
	
	<!-- *********************************************** FICO Step Configuration=START ***************************************************** -->
	
	<bean name="hkRcFicoPrepropStep:master"
		class="org.springframework.batch.core.partition.support.PartitionStep">
		<property name="jobRepository" ref="jobRepository" />
		<property name="stepExecutionSplitter">
			<bean
				class="org.springframework.batch.core.partition.support.SimpleStepExecutionSplitter">
				<constructor-arg ref="jobRepository" />
				<constructor-arg ref="hkRcFicoDataProcessStep" />
				<constructor-arg ref="hkRcFicoPartitioner" />
			</bean>
		</property>
		<property name="partitionHandler">
			<bean
				class="org.springframework.batch.core.partition.support.TaskExecutorPartitionHandler"
				scope="step">
				<property name="taskExecutor">
					<bean
						class="org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor">
						<property name="corePoolSize" value="8" />
						<property name="maxPoolSize" value="12" />
					</bean>
				</property>
				<property name="step" ref="hkRcFicoDataProcessStep" />
				<property name="gridSize" value="8" />
			</bean>
		</property>
	</bean>
	

	<bean id="hkRcFicoPartitioner" class="com.citi.retail.optima.etl.batch.job.infra.FlatFileDataPartitioner" scope="step">
		<property name="directoryName" value="#{#getInputFilePath(jobParameters[COUNTRYPRODUCT])}" />
		<property name= "originalFile" value="#{#getInputFilePath(jobParameters[COUNTRYPRODUCT])}" />
		<property name="splitFile" value="#{#getInputFilePath(jobParameters[COUNTRYPRODUCT])}" />
		<property name="archvFile" value="#{#getArchiveFilePath(jobParameters[COUNTRYPRODUCT])}" />
		<property name="evalContext" ref="customEvaluationContext" /> 
		<property name="filePattern" value="#{jobParameters[FICO]}"/> 
		<property name="noOfRecordsPerSplit" value="100000"/> 
				<property name="startTime" value="#{jobParameters[STRT_TIME]}"></property> 
		<property name="jobName" value="#{jobParameters[JOB_NAME]}"></property>
	</bean>
	
	
	<batch:step id="hkRcFicoDataProcessStep">
			<batch:tasklet allow-start-if-complete="false">
				<batch:chunk reader="hkRcFicoCsvReader" processor="hkRcFicoAcqProcessor"
					writer="dataAcqWriter" commit-interval="1000" skip-limit="50000">
					<batch:skippable-exception-classes>
						<batch:include
							class="com.citi.retail.optima.etl.common.exception.OptimaRetailDataException" />
					</batch:skippable-exception-classes>
				</batch:chunk>
			</batch:tasklet>
	</batch:step>
	
	
	
	<bean id="hkRcFicoCsvReader"
		class="org.springframework.batch.item.file.FlatFileItemReader"
		scope="step" lazy-init="true">
		<property name="linesToSkip" value="1"/>
		<property name="resource" value="#{stepExecutionContext[fileName]}"></property>
		<property name="lineMapper">
			<bean class="org.springframework.batch.item.file.mapping.DefaultLineMapper">
				<property name="lineTokenizer">
					<bean
						class="org.springframework.batch.item.file.transform.DelimitedLineTokenizer">
						
						<property name="delimiter" value="|"/>
						<property name="names"
							value="#{#getFileColumnNameList('HK_RC_FICO')}" />	
							
					</bean>
				</property>
				<property name="fieldSetMapper">
					<bean
						class="com.citi.retail.optima.etl.batch.job.mapper.HkRcFicoFieldSetMapper">
					</bean>
				</property>
			</bean>
		</property>
	</bean>
	
	<bean id="hkRcFicoAcqProcessor"
		class="com.citi.retail.optima.etl.batch.job.processor.da.HkSupportingDataProcessor"
		scope="step">
		<property name="dataService" ref="hkRcDataService"/>
		<property name="preProcessMapName" value="ficoDataProcessStep"/>
	</bean>
	
	<!-- *********************************************** FICO Step Configuration=END ***************************************************** -->

	<!-- *********************************************** FXRATE Step Configuration=START ***************************************************** -->
	
	<!-- <bean name="fxratePrepropStep:master"
		class="org.springframework.batch.core.partition.support.PartitionStep">
		<property name="jobRepository" ref="jobRepository" />
		<property name="stepExecutionSplitter">
			<bean
				class="org.springframework.batch.core.partition.support.SimpleStepExecutionSplitter">
				<constructor-arg ref="jobRepository" />
				<constructor-arg ref="fxrateDataProcessStep" />
				<constructor-arg ref="fxratePartitioner" />
			</bean>
		</property>
		<property name="partitionHandler">
			<bean
				class="org.springframework.batch.core.partition.support.TaskExecutorPartitionHandler"
				scope="step">
				<property name="taskExecutor">
					<bean
						class="org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor">
						<property name="corePoolSize" value="8" />
						<property name="maxPoolSize" value="12" />
					</bean>
				</property>
				<property name="step" ref="fxrateDataProcessStep" />
				<property name="gridSize" value="8" />
			</bean>
		</property>
	</bean>
	

	<bean id="fxratePartitioner" class="com.citi.retail.optima.etl.batch.job.infra.FlatFileDataPartitioner" scope="step">
		<property name="directoryName" value="${filewatcher.input.directory}"/> 
		<property name="directoryName" value="//dev//shm//tmp//rnbw//"/> 
		<property name="filePattern" value="#{jobParameters[FXRATE]}"/> 
		<property name="noOfRecordsPerSplit" value="100000"/> 
				<property name="startTime" value="#{jobParameters[STRT_TIME]}"></property> 
		<property name="jobName" value="#{jobParameters[JOB_NAME]}"></property>
	</bean>
	
	
	<batch:step id="fxrateDataProcessStep">
			<batch:tasklet allow-start-if-complete="false">
				<batch:chunk reader="fxrateCsvReader" processor="fxrateAcqProcessor"
					writer="dataAcqWriter" commit-interval="1000" skip-limit="10000000">
					<batch:skippable-exception-classes>
						<batch:include
							class="com.citi.retail.optima.etl.common.exception.OptimaRetailDataException" />
					</batch:skippable-exception-classes>
				</batch:chunk>
			</batch:tasklet>
	</batch:step>
	
	
	
	<bean id="fxrateCsvReader"
		class="org.springframework.batch.item.file.FlatFileItemReader"
		scope="step" lazy-init="true">
		<property name="linesToSkip" value="1"/>
		<property name="resource" value="#{stepExecutionContext[fileName]}"></property>
		<property name="lineMapper">
			<bean class="org.springframework.batch.item.file.mapping.DefaultLineMapper">
				<property name="lineTokenizer">
					<bean
						class="org.springframework.batch.item.file.transform.DelimitedLineTokenizer">
						
						<property name="delimiter" value="|"/>
						<property name="names"
							value="Unit,Scenario,Year,Period,LedgerUnit,Currency,CitiSource,DataClass,Acct,Rate" />
					</bean>
				</property>
				<property name="fieldSetMapper">
					<bean
						class="com.citi.retail.optima.etl.batch.job.mapper.FxRateFieldSetMapper">
						<property name="dateFormat" ref="format_ddMMMyyyy"/>
					</bean>
				</property>
			</bean>
		</property>
	</bean>
	
	<bean id="fxratePrototype" class="com.citi.retail.optima.etl.common.model.FxRateRecord" scope="prototype"/>
	
	<bean id="fxrateAcqProcessor"
		class="com.citi.retail.optima.etl.batch.job.processor.da.FxRateSupportingDataProcessor"
		scope="step">
		<property name="dataService" ref="twDataService"/>
		<property name="preProcessMapName" value="fxrateDataProcessStep"/>
	</bean> -->
	
	<!-- *********************************************** FXRATE Step Configuration=END ***************************************************** -->
	
	<!-- *********************************************** New Commitment Step Configuration=START ***************************************************** -->
	
	<bean name="hkRcNewCommitPrepropStep:master"
		class="org.springframework.batch.core.partition.support.PartitionStep">
		<property name="jobRepository" ref="jobRepository" />
		<property name="stepExecutionSplitter">
			<bean
				class="org.springframework.batch.core.partition.support.SimpleStepExecutionSplitter">
				<constructor-arg ref="jobRepository" />
				<constructor-arg ref="hkRcNewCommitDataProcessStep" />
				<constructor-arg ref="hkRcNewCommitPartitioner" />
			</bean>
		</property>
		<property name="partitionHandler">
			<bean
				class="org.springframework.batch.core.partition.support.TaskExecutorPartitionHandler"
				scope="step">
				<property name="taskExecutor">
					<bean
						class="org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor">
						<property name="corePoolSize" value="8" />
						<property name="maxPoolSize" value="12" />
					</bean>
				</property>
				<property name="step" ref="hkRcNewCommitDataProcessStep" />
				<property name="gridSize" value="8" />
			</bean>
		</property>
	</bean>
	

	<bean id="hkRcNewCommitPartitioner" class="com.citi.retail.optima.etl.batch.job.infra.FlatFileDataPartitioner" scope="step">
		<property name="directoryName" value="#{#getInputFilePath(jobParameters[COUNTRYPRODUCT])}" />
		<property name= "originalFile" value="#{#getInputFilePath(jobParameters[COUNTRYPRODUCT])}" />
		<property name="splitFile" value="#{#getInputFilePath(jobParameters[COUNTRYPRODUCT])}" />
		<property name="archvFile" value="#{#getArchiveFilePath(jobParameters[COUNTRYPRODUCT])}" />
		<property name="evalContext" ref="customEvaluationContext" /> 
		<property name="filePattern" value="#{jobParameters[COMMIT]}"/> 
		<property name="noOfRecordsPerSplit" value="100000"/> 
				<property name="startTime" value="#{jobParameters[STRT_TIME]}"></property> 
		<property name="jobName" value="#{jobParameters[JOB_NAME]}"></property>
	</bean>
	
	
	<batch:step id="hkRcNewCommitDataProcessStep">
			<batch:tasklet allow-start-if-complete="false">
				<batch:chunk reader="hkRcNewCommitCsvReader" processor="hkRcNewCommitAcqProcessor"
					writer="dataAcqWriter" commit-interval="1000" skip-limit="50000">
					<batch:skippable-exception-classes>
						<batch:include
							class="com.citi.retail.optima.etl.common.exception.OptimaRetailDataException" />
					</batch:skippable-exception-classes>
				</batch:chunk>
			</batch:tasklet>
	</batch:step>
	
	
	
	<bean id="hkRcNewCommitCsvReader"
		class="org.springframework.batch.item.file.FlatFileItemReader"
		scope="step" lazy-init="true">
		<property name="linesToSkip" value="1"/>
		<property name="resource" value="#{stepExecutionContext[fileName]}"></property>
		<property name="lineMapper">
			<bean class="org.springframework.batch.item.file.mapping.DefaultLineMapper">
				<property name="lineTokenizer">
					<bean
						class="org.springframework.batch.item.file.transform.DelimitedLineTokenizer">
						
						<property name="delimiter" value="|"/>
						<property name="names"
							value="#{#getFileColumnNameList('HK_RC_NEW')}" />	
					</bean>
				</property>
				<property name="fieldSetMapper">
					<bean
						class="com.citi.retail.optima.etl.batch.job.mapper.HkRcNewFieldSetMapper">
					</bean>
				</property>
			</bean>
		</property>
	</bean>
	
	<bean id="hkRcNewCommitAcqProcessor"
		class="com.citi.retail.optima.etl.batch.job.processor.da.HkSupportingDataProcessor"
		scope="step">
		<property name="dataService" ref="hkRcDataService"/>
		<property name="preProcessMapName" value="newCommitDataProcessStep"/>
	</bean>
	
	<!-- *********************************************** New Commitment Step Configuration=END ***************************************************** -->
	
	<!-- *********************************************** Delq Step Configuration=START ***************************************************** -->
	
	<bean name="hkRcDelqPrepropStep:master"
		class="org.springframework.batch.core.partition.support.PartitionStep">
		<property name="jobRepository" ref="jobRepository" />
		<property name="stepExecutionSplitter">
			<bean
				class="org.springframework.batch.core.partition.support.SimpleStepExecutionSplitter">
				<constructor-arg ref="jobRepository" />
				<constructor-arg ref="hkRcDelqDataProcessStep" />
				<constructor-arg ref="hkRcDelqPartitioner" />
			</bean>
		</property>
		<property name="partitionHandler">
			<bean
				class="org.springframework.batch.core.partition.support.TaskExecutorPartitionHandler"
				scope="step">
				<property name="taskExecutor">
					<bean
						class="org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor">
						<property name="corePoolSize" value="8" />
						<property name="maxPoolSize" value="12" />
					</bean>
				</property>
				<property name="step" ref="hkRcDelqDataProcessStep" />
				<property name="gridSize" value="8" />
			</bean>
		</property>
	</bean>
	

	<bean id="hkRcDelqPartitioner" class="com.citi.retail.optima.etl.batch.job.infra.FlatFileDataPartitioner" scope="step">
		<property name="directoryName" value="#{#getInputFilePath(jobParameters[COUNTRYPRODUCT])}" />
		<property name= "originalFile" value="#{#getInputFilePath(jobParameters[COUNTRYPRODUCT])}" />
		<property name="splitFile" value="#{#getInputFilePath(jobParameters[COUNTRYPRODUCT])}" />
		<property name="archvFile" value="#{#getArchiveFilePath(jobParameters[COUNTRYPRODUCT])}" />
		<property name="evalContext" ref="customEvaluationContext" /> 
		<property name="filePattern" value="#{jobParameters[DELQ]}"/> 
		<property name="noOfRecordsPerSplit" value="100000"/> 
				<property name="startTime" value="#{jobParameters[STRT_TIME]}"></property> 
		<property name="jobName" value="#{jobParameters[JOB_NAME]}"></property>
	</bean>
	
	
	<batch:step id="hkRcDelqDataProcessStep">
			<batch:tasklet allow-start-if-complete="false">
				<batch:chunk reader="hkRcDelqCsvReader" processor="hkRcDelqAcqProcessor"
					writer="dataAcqWriter" commit-interval="1000" skip-limit="50000">
					<batch:skippable-exception-classes>
						<batch:include
							class="com.citi.retail.optima.etl.common.exception.OptimaRetailDataException" />
					</batch:skippable-exception-classes>
				</batch:chunk>
			</batch:tasklet>
	</batch:step>
	
	
	
	<bean id="hkRcDelqCsvReader"
		class="org.springframework.batch.item.file.FlatFileItemReader"
		scope="step" lazy-init="true">
		<property name="linesToSkip" value="1"/>
		<property name="resource" value="#{stepExecutionContext[fileName]}"></property>
		<property name="lineMapper">
			<bean class="org.springframework.batch.item.file.mapping.DefaultLineMapper">
				<property name="lineTokenizer">
					<bean
						class="org.springframework.batch.item.file.transform.DelimitedLineTokenizer">
						
						<property name="delimiter" value="|"/>
						<property name="names"
							value="#{#getFileColumnNameList('HK_RC_DELQ')}" />
					</bean>
				</property>
				<property name="fieldSetMapper">
					<bean
						class="com.citi.retail.optima.etl.batch.job.mapper.HkRcDelqFieldSetMapper">
					</bean>
				</property>
			</bean>
		</property>
	</bean>
	
	<bean id="hkRcDelqAcqProcessor"
		class="com.citi.retail.optima.etl.batch.job.processor.da.HkSupportingDataProcessor"
		scope="step">
		<property name="dataService" ref="hkRcDataService"/>
		<property name="preProcessMapName" value="delqDataProcessStep"/>
	</bean>
	
	<!-- *********************************************** Delq Step Configuration=END ***************************************************** -->
	
	
	<!-- *********************************************** Write-off Step Configuration=START ***************************************************** -->
	
	<bean name="hkRcWoPrepropStep:master"
		class="org.springframework.batch.core.partition.support.PartitionStep">
		<property name="jobRepository" ref="jobRepository" />
		<property name="stepExecutionSplitter">
			<bean
				class="org.springframework.batch.core.partition.support.SimpleStepExecutionSplitter">
				<constructor-arg ref="jobRepository" />
				<constructor-arg ref="hkRcWoDataProcessStep" />
				<constructor-arg ref="hkRcWoPartitioner" />
			</bean>
		</property>
		<property name="partitionHandler">
			<bean
				class="org.springframework.batch.core.partition.support.TaskExecutorPartitionHandler"
				scope="step">
				<property name="taskExecutor">
					<bean
						class="org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor">
						<property name="corePoolSize" value="8" />
						<property name="maxPoolSize" value="12" />
					</bean>
				</property>
				<property name="step" ref="hkRcWoDataProcessStep" />
				<property name="gridSize" value="8" />
			</bean>
		</property>
	</bean>
	
	<bean id="hkRcWoPartitioner" class="com.citi.retail.optima.etl.batch.job.infra.FlatFileDataPartitioner" scope="step">
		<property name="directoryName" value="#{#getInputFilePath(jobParameters[COUNTRYPRODUCT])}" />
		<property name= "originalFile" value="#{#getInputFilePath(jobParameters[COUNTRYPRODUCT])}" />
		<property name="splitFile" value="#{#getInputFilePath(jobParameters[COUNTRYPRODUCT])}" />
		<property name="archvFile" value="#{#getArchiveFilePath(jobParameters[COUNTRYPRODUCT])}" />
		<property name="evalContext" ref="customEvaluationContext" />
		<property name="filePattern" value="#{jobParameters[WO]}"/> 
		<property name="noOfRecordsPerSplit" value="100000"/> 
				<property name="startTime" value="#{jobParameters[STRT_TIME]}"></property> 
		<property name="jobName" value="#{jobParameters[JOB_NAME]}"></property>
	</bean>
	
	
	<batch:step id="hkRcWoDataProcessStep">
			<batch:tasklet allow-start-if-complete="false">
				<batch:chunk reader="hkRcWoCsvReader" processor="hkRcWoAcqProcessor"
					writer="dataAcqWriter" commit-interval="1000" skip-limit="50000">
					<batch:skippable-exception-classes>
						<batch:include
							class="com.citi.retail.optima.etl.common.exception.OptimaRetailDataException" />
					</batch:skippable-exception-classes>
				</batch:chunk>
			</batch:tasklet>
	</batch:step>
	
	<bean id="hkRcWoCsvReader"
		class="org.springframework.batch.item.file.FlatFileItemReader"
		scope="step" lazy-init="true">
		<property name="linesToSkip" value="1"/>
		<property name="resource" value="#{stepExecutionContext[fileName]}"></property>
		<property name="lineMapper">
			<bean class="org.springframework.batch.item.file.mapping.DefaultLineMapper">
				<property name="lineTokenizer">
					<bean
						class="org.springframework.batch.item.file.transform.DelimitedLineTokenizer">
						
						<property name="delimiter" value="|"/>
						<property name="names"
							value="#{#getFileColumnNameList('HK_RC_WO')}" />	
					</bean>
				</property>
				<property name="fieldSetMapper">
					<bean
						class="com.citi.retail.optima.etl.batch.job.mapper.HkRcWoFieldSetMapper">
						<property name="dateFormat" ref="format_ddMMMyyyy"/>
					</bean>
				</property>
			</bean>
		</property>
	</bean>
	
	<bean id="hkRcWoAcqProcessor"
		class="com.citi.retail.optima.etl.batch.job.processor.da.HkSupportingDataProcessor"
		scope="step">
		<property name="dataService" ref="hkRcDataService"/>
		<property name="preProcessMapName" value="woDataProcessStep"/>
	</bean>
	
	<!-- *********************************************** Write-off Step Configuration=END ***************************************************** -->
	
	<!-- *********************************************** Recovery Step Configuration=START ***************************************************** -->
	
	<bean name="hkRcRecvPrepropStep:master"
		class="org.springframework.batch.core.partition.support.PartitionStep">
		<property name="jobRepository" ref="jobRepository" />
		<property name="stepExecutionSplitter">
			<bean
				class="org.springframework.batch.core.partition.support.SimpleStepExecutionSplitter">
				<constructor-arg ref="jobRepository" />
				<constructor-arg ref="hkRcRecvDataProcessStep" />
				<constructor-arg ref="hkRcRecvPartitioner" />
			</bean>
		</property>
		<property name="partitionHandler">
			<bean
				class="org.springframework.batch.core.partition.support.TaskExecutorPartitionHandler"
				scope="step">
				<property name="taskExecutor">
					<bean
						class="org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor">
						<property name="corePoolSize" value="8" />
						<property name="maxPoolSize" value="12" />
					</bean>
				</property>
				<property name="step" ref="hkRcRecvDataProcessStep" />
				<property name="gridSize" value="8" />
			</bean>
		</property>
	</bean>
	
	<bean id="hkRcRecvPartitioner" class="com.citi.retail.optima.etl.batch.job.infra.FlatFileDataPartitioner" scope="step">
		<property name="directoryName" value="#{#getInputFilePath(jobParameters[COUNTRYPRODUCT])}" />
		<property name= "originalFile" value="#{#getInputFilePath(jobParameters[COUNTRYPRODUCT])}" />
		<property name="splitFile" value="#{#getInputFilePath(jobParameters[COUNTRYPRODUCT])}" />
		<property name="archvFile" value="#{#getArchiveFilePath(jobParameters[COUNTRYPRODUCT])}" />
		<property name="evalContext" ref="customEvaluationContext" />
		<property name="filePattern" value="#{jobParameters[REC]}"/> 
		<property name="noOfRecordsPerSplit" value="100000"/> 
				<property name="startTime" value="#{jobParameters[STRT_TIME]}"></property> 
		<property name="jobName" value="#{jobParameters[JOB_NAME]}"></property>
	</bean>
	
	<batch:step id="hkRcRecvDataProcessStep">
			<batch:tasklet allow-start-if-complete="false">
				<batch:chunk reader="hkRcRecvCsvReader" processor="hkRcRecvAcqProcessor"
					writer="dataAcqWriter" commit-interval="1000" skip-limit="50000">
					<batch:skippable-exception-classes>
						<batch:include
							class="com.citi.retail.optima.etl.common.exception.OptimaRetailDataException" />
					</batch:skippable-exception-classes>
				</batch:chunk>
			</batch:tasklet>
			<batch:listeners>
			<batch:listener ref="hkRcRecvAcqProcessor" />
		</batch:listeners>
	</batch:step>
	
	<bean id="hkRcRecvCsvReader"
		class="org.springframework.batch.item.file.FlatFileItemReader"
		scope="step" lazy-init="true">
		<property name="linesToSkip" value="1"/>
		<property name="resource" value="#{stepExecutionContext[fileName]}"></property>
		<property name="lineMapper">
			<bean class="org.springframework.batch.item.file.mapping.DefaultLineMapper">
				<property name="lineTokenizer">
					<bean
						class="org.springframework.batch.item.file.transform.DelimitedLineTokenizer">
						
						<property name="delimiter" value="|"/>
						<property name="names"
							value="#{#getFileColumnNameList('HK_RC_REC')}" />	
					</bean>
				</property>
				<property name="fieldSetMapper">
					<bean
						class="com.citi.retail.optima.etl.batch.job.mapper.HkRcRecFieldSetMapper">
						<property name="dateFormat" ref="format_ddMMMyyyy"/>
					</bean>
					
				</property>
				
			</bean>
		</property>
	</bean>
	
	
	<bean id="hkRcRecvAcqProcessor"
		class="com.citi.retail.optima.etl.batch.job.processor.da.HkSupportingDataProcessor"
		scope="step">
		<property name="dataService" ref="hkRcDataService"/>
		<property name="preProcessMapName" value="recvDataProcessStep"/>
	</bean>
	
	
	<!-- *********************************************** Recovery Step Configuration=END ***************************************************** -->
	
	<!-- *********************************************** Card Transfer Configuration=START ***************************************************** -->
	
	<bean name="hkRcCrdTransferPrepropStep:master"
		class="org.springframework.batch.core.partition.support.PartitionStep">
		<property name="jobRepository" ref="jobRepository" />
		<property name="stepExecutionSplitter">
			<bean
				class="org.springframework.batch.core.partition.support.SimpleStepExecutionSplitter">
				<constructor-arg ref="jobRepository" />
				<constructor-arg ref="hkRcCrdTransferDataProcessStep" />
				<constructor-arg ref="hkRcCrdTransferPartitioner" />
			</bean>
		</property>
		<property name="partitionHandler">
			<bean
				class="org.springframework.batch.core.partition.support.TaskExecutorPartitionHandler"
				scope="step">
				<property name="taskExecutor">
					<bean
						class="org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor">
						<property name="corePoolSize" value="8" />
						<property name="maxPoolSize" value="12" />
					</bean>
				</property>
				<property name="step" ref="hkRcCrdTransferDataProcessStep" />
				<property name="gridSize" value="8" />
			</bean>
		</property>
	</bean>
	
	<bean id="hkRcCrdTransferPartitioner" class="com.citi.retail.optima.etl.batch.job.infra.FlatFileDataPartitioner" scope="step">
		<property name="directoryName" value="#{#getInputFilePath(jobParameters[COUNTRYPRODUCT])}" />
		<property name= "originalFile" value="#{#getInputFilePath(jobParameters[COUNTRYPRODUCT])}" />
		<property name="splitFile" value="#{#getInputFilePath(jobParameters[COUNTRYPRODUCT])}" />
		<property name="archvFile" value="#{#getArchiveFilePath(jobParameters[COUNTRYPRODUCT])}" />
		<property name="evalContext" ref="customEvaluationContext" />
		<property name="filePattern" value="#{jobParameters[TRANS]}"/> 
		<property name="noOfRecordsPerSplit" value="100000"/> 
				<property name="startTime" value="#{jobParameters[STRT_TIME]}"></property> 
		<property name="jobName" value="#{jobParameters[JOB_NAME]}"></property>
	</bean>
	
	<batch:step id="hkRcCrdTransferDataProcessStep">
			<batch:tasklet allow-start-if-complete="false">
				<batch:chunk reader="hkRcCrdTransferCsvReader" processor="hkRcCrdTransferAcqProcessor"
					writer="dataAcqWriter" commit-interval="1000" skip-limit="50000">
					<batch:skippable-exception-classes>
						<batch:include
							class="com.citi.retail.optima.etl.common.exception.OptimaRetailDataException" />
					</batch:skippable-exception-classes>
				</batch:chunk>
			</batch:tasklet>
			<batch:listeners>
			<batch:listener ref="hkRcCrdTransferAcqProcessor" />
		</batch:listeners>
	</batch:step>
	
	<bean id="hkRcCrdTransferCsvReader"
		class="org.springframework.batch.item.file.FlatFileItemReader"
		scope="step" lazy-init="true">
		<property name="linesToSkip" value="1"/>
		<property name="resource" value="#{stepExecutionContext[fileName]}"></property>
		<property name="lineMapper">
			<bean class="org.springframework.batch.item.file.mapping.DefaultLineMapper">
				<property name="lineTokenizer">
					<bean
						class="org.springframework.batch.item.file.transform.DelimitedLineTokenizer">
						
						<property name="delimiter" value="|"/>
						<property name="names"
							value="#{#getFileColumnNameList('HK_RC_CRD')}" />
					</bean>
				</property>
				<property name="fieldSetMapper">
					<bean
						class="com.citi.retail.optima.etl.batch.job.mapper.HkRcCrdFieldSetMapper">
					</bean>
				</property>
				
			</bean>
		</property>
	</bean>
	
	
	<bean id="hkRcCrdTransferAcqProcessor"
		class="com.citi.retail.optima.etl.batch.job.processor.da.HkCardTransferDataProcessor"
		scope="step">
		<property name="dataService" ref="hkRcDataService"/>
		<property name="preProcessMapName" value="crdTransferDataProcessStep"/>
	</bean>
	
	
	<!-- *********************************************** Recovery Step Configuration=END ***************************************************** -->
	
	<!-- *********************************************** Rainbow Step Configuration=START ***************************************************** -->
	<bean name="hkRcRainbowproccrStep:master"
		class="org.springframework.batch.core.partition.support.PartitionStep">
		<property name="jobRepository" ref="jobRepository" />
		<property name="stepExecutionSplitter">
			<bean
				class="org.springframework.batch.core.partition.support.SimpleStepExecutionSplitter">
				<constructor-arg ref="jobRepository" />
				<constructor-arg ref="hkRcRainbowDataProcessStep" />
				<constructor-arg ref="hkRcRainbowPartitioner" />
			</bean>
		</property>
		<property name="partitionHandler">
			<bean
				class="org.springframework.batch.core.partition.support.TaskExecutorPartitionHandler"
				scope="step">
				<property name="taskExecutor">
					<bean
						class="org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor">
						<property name="corePoolSize" value="8" />
						<property name="maxPoolSize" value="12" />
					</bean>
				</property>
				<property name="step" ref="hkRcRainbowDataProcessStep" />
				<property name="gridSize" value="8" />
			</bean>
		</property>
	</bean>
	
	<bean id="hkRcRainbowPartitioner" class="com.citi.retail.optima.etl.batch.job.infra.FlatFileDataPartitioner" scope="step">
		
		<property name="directoryName" value="#{#getInputFilePath(jobParameters[COUNTRYPRODUCT])}" />
		<property name= "originalFile" value="#{#getInputFilePath(jobParameters[COUNTRYPRODUCT])}" />
		<property name="splitFile" value="#{#getInputFilePath(jobParameters[COUNTRYPRODUCT])}" />
		<property name="archvFile" value="#{#getArchiveFilePath(jobParameters[COUNTRYPRODUCT])}" />
		<property name="evalContext" ref="customEvaluationContext" />
		<property name="filePattern" value="#{jobParameters[RNBW]}"/> 
		<property name="noOfRecordsPerSplit" value="100000"/> 
				<property name="startTime" value="#{jobParameters[STRT_TIME]}"></property> 
		<property name="jobName" value="#{jobParameters[JOB_NAME]}"></property>
	</bean>
	
	<batch:step id="hkRcRainbowDataProcessStep">
			<batch:tasklet allow-start-if-complete="false">
				<batch:chunk reader="hkRcRainbowCsvReader" processor = "hkRcRainbowDataProcessor"
					writer="hkRcCsvFileItemWriter" commit-interval="10000" skip-limit="50000">
					<batch:skippable-exception-classes>
						<batch:include
							class="com.citi.retail.optima.etl.common.exception.OptimaRetailDataException" />
					</batch:skippable-exception-classes>
				</batch:chunk>
			</batch:tasklet>
			
			<batch:listeners>
				<batch:listener ref="hkRcRainbowEnrichmentProcessor" />
				<batch:listener ref="hkRcRainbowAggregationProcessor" />
				<batch:listener ref="hkRcCsvFileItemWriter" />
				<batch:listener ref="rcAlscommonBalanceWriter" />
				<batch:listener ref="hkRcRainbowCsvReader" />
			</batch:listeners>
	</batch:step>
	
	<bean id="hkRcRainbowCsvReader"
		class="com.citi.retail.optima.etl.batch.job.reader.CustomItemReader"
		scope="step" lazy-init="true">
<!-- 		<property name="linesToSkip" value="1"/> -->
		<property name="strict" value="true"></property>
		<property name="resource" value="#{stepExecutionContext[fileName]}"></property>
			<property name= "fileName" value="#{stepExecutionContext[fileName]}"></property>
		<property name="lineMapper">
			<bean class="org.springframework.batch.item.file.mapping.DefaultLineMapper">
				<property name="lineTokenizer">
					<bean
						class="org.springframework.batch.item.file.transform.DelimitedLineTokenizer">
						
						<property name="delimiter" value="|"/>
						<!-- <property name="names"
							value="baselId,crdAcctNbr,hkMemberSince,acctOpenDt,acctIntrnlStatCdeM,blkCde1ChgDtM,blkCde2ChgDtM,
							acctBlkCde1M,acctBlkCde2M,acctBlkRsn1M,acctBlkRsn2M,crdTyp,cycDueM,totalEnrMth,tenr,tintfee,
							ttlAcM,adv,unadv, acctOrgCde,creditLimitUsd,ficoScore,numNewAccts,alopBalLcyamtC,blngCycDt,
							collFeeBnpLcy,crlmLcyamtM,cshServFeeBnpLcy,delqStrC,insFeeBnpLcy,lstPymtDt,membrFeeBnpLcy,
							nsfFeeBnpLcy,overlimtFeeBnpLcy,recovFeeBnpLcy,rtlServFeeBnpLcy,servFeeFeeBnpLcy,uncrlmt" /> -->
						<property name="names"
							value="#{#getFileColumnNameList('HK_RC_RNBW')}" />	
					</bean>
				</property>
				<property name="fieldSetMapper">
					<bean
						class="com.citi.retail.optima.etl.batch.job.mapper.HkRcRnbwFieldSetMapper">
						<property name="dateFormat" ref="format_ddMMMyyyy"/>
					</bean>
				</property>
			</bean>
		</property>
	</bean>
	
	<bean id="hkRcRainbowDataProcessor"
		class="org.springframework.batch.item.support.CompositeItemProcessor"
		scope="step">
		<property name="delegates">
			<util:list>
				<ref bean="hkRcRainbowEnrichmentProcessor" />
				<ref bean="hkRcRainbowAggregationProcessor" />
			</util:list>
		</property>
	</bean>
	
	<bean id="hkRcRainbowEnrichmentProcessor"
		class="com.citi.retail.optima.etl.batch.job.processor.EnrichmentProcessor"
		scope="step" p:enrichmentServiceBean-ref="hkRcRainbowEnrichmentService"
		p:timeTracker-ref="timeTracker">
		<property name="batchInstanceId" value="#{jobParameters[batchInstanceId]}" />
		<property name="jobName" value="#{jobParameters[JOB_NAME]}"/>
		<property name="fileName" value="#{stepExecutionContext[fileName]}"></property>
		<property name="auditFileId" value="#{jobParameters[AUDITFILEID]}"/>
		<property name="auditFiles" value="#{jobParameters[AUDITFILES]}"/>
		<property name="jobMessageDao" ref="jobMessageDao"/>		
		<property name="ctlFileDt" value="#{jobParameters[CTLFILECREATIONDT]}"/>
		<property name="jobConfigDao" ref="jobConfigDao" />
	</bean>
	
	<bean	id="hkRcRainbowEnrichmentService"
			class="com.citi.retail.optima.etl.enrichment.impl.EnrichmentServiceImpl"
			p:evalContext-ref="customEvaluationContext"
			p:enrichmentRules-ref="enrichmentRulesHolder"
			p:keyList="#{#getConcatenatedKeys(jobParameters[sys_proc_id], 'hkRcRainbowDataProcessStep', null)}"
			scope="step"
	/>
	
	<bean name="hkRcRainbowAggregationProcessor"
		class="com.citi.retail.optima.etl.batch.job.processor.AggregationProcessor"
		init-method="init" scope="step">
		<property name="aggregationServiceFactory" ref="aggregationServiceFactory" />
		<property name="batchInstanceId" value="#{jobParameters[batchInstanceId]}" />
		<property name="monthEndDate" value="#{jobParameters[reportDate]}" />
		<property name="keyList"
			value="#{#getConcatenatedKeys(jobParameters[sys_proc_id], 'hkRcRainbowDataProcessStep',null)}" />
		<property name="stepName" value="hkRcRainbowDataProcessStep" />
		<property name="accountTraceabilityRequired" value="false" />
		<property name="timeTracker" ref="timeTracker" />
		<property name="sysProcId" value="#{jobParameters[sys_proc_id]}" />
	</bean>
	
	<bean id="hkRcCsvFileItemWriter" class="com.citi.retail.optima.etl.batch.job.writer.ReadyCreditConditionalCompositeItemWriter" scope="step">
		<!-- property name="excludeItemDelegate" ref="excludeRecFileWriter"/-->
		<property name="delegates">
			<util:list>
				<ref bean="rcAlsIndicativeFileWriter"/>
				<ref bean="rcAlsarrangementRatingWriter"/>
				<ref bean="rcAlscommonBalanceWriter"/>
			</util:list>
		</property>
	</bean>
	
	<!-- *********************************************** Rainbow Step Configuration=END ***************************************************** -->
	
	<!-- *********************************************** Rainbow Aggregation Step Configuration=START ***************************************************** -->
	
	<bean name="hkRcRainbowproccrAggregationResultsTasklet" class="com.citi.retail.optima.etl.batch.tasklet.FooterSummaryAggregationResultTasklet"
		scope="step">
		<property name="aggregationServiceFactory" ref="aggregationServiceFactory" />
		<property name="batchInstanceId" value="#{jobParameters[batchInstanceId]}" />
		<property name="stepName" value="hkRcRainbowDataProcessStep" />
		<property name="sysProcId" value="#{jobParameters[sys_proc_id]}" />
		<property name="footerAggrRuleId" value="108" />
		<property name="footerItemList" ref="hkReadyCreditfooterItemList" />
		<property name="aggrFooterWriter" ref="rcAggrFooterWriter"/>
		<property name="jobConfigDao" ref="jobConfigDao" />
	</bean>
	
	<util:list id="hkReadyCreditfooterItemList" scope="step" list-class="java.util.ArrayList">
			<bean class="com.citi.retail.optima.etl.common.model.RainbowFileFooter" p:hashFileType="FINSERVTYP" p:hashField="eFinServTypeId" 
			p:outputFileResourceName="GN_SR67841_#{jobParameters[productCode]}_#{jobParameters[region]}_#{jobParameters[countryCode]}_RSK_#{jobParameters[dateOfInfo]}_HIST_#{jobParameters[currentDate]}_IND_#{jobParameters[versionId]}."/>
			<bean class="com.citi.retail.optima.etl.common.model.RainbowFileFooter" p:hashFileType="RNK" p:hashField="eRank" 
			p:outputFileResourceName="GN_SR67841_#{jobParameters[productCode]}_#{jobParameters[region]}_#{jobParameters[countryCode]}_RSK_#{jobParameters[dateOfInfo]}_HIST_#{jobParameters[currentDate]}_ARG_#{jobParameters[versionId]}."/>
			<bean class="com.citi.retail.optima.etl.common.model.RainbowFileFooter" p:hashFileType="BAL_TYP" p:hashField="eBalType" 
			p:outputFileResourceName="GN_SR67841_#{jobParameters[productCode]}_#{jobParameters[region]}_#{jobParameters[countryCode]}_RSK_#{jobParameters[dateOfInfo]}_HIST_#{jobParameters[currentDate]}_CB_#{jobParameters[versionId]}."/>			
	</util:list>
	

	<!-- *********************************************** Rainbow Aggregation Step Configuration=END ***************************************************** -->
	<!-- *********************************************** Pre Rainbow Step Configuration=START ***************************************************** -->
	<bean name="hkRcPreRainbowproccrStep:master"
		class="org.springframework.batch.core.partition.support.PartitionStep">
		<property name="jobRepository" ref="jobRepository" />
		<property name="stepExecutionSplitter">
			<bean
				class="org.springframework.batch.core.partition.support.SimpleStepExecutionSplitter">
				<constructor-arg ref="jobRepository" />
				<constructor-arg ref="hkRcPreRainbowDataProcessStep" />
				<constructor-arg ref="hkRcPreRainbowPartitioner" />
			</bean>
		</property>
		<property name="partitionHandler">
			<bean
				class="org.springframework.batch.core.partition.support.TaskExecutorPartitionHandler"
				scope="step">
				<property name="taskExecutor">
					<bean
						class="org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor">
						<property name="corePoolSize" value="8" />
						<property name="maxPoolSize" value="12" />
					</bean>
				</property>
				<property name="step" ref="hkRcPreRainbowDataProcessStep" />
				<property name="gridSize" value="8" />
			</bean>
		</property>
	</bean>
	
	<bean id="hkRcPreRainbowPartitioner" class="com.citi.retail.optima.etl.batch.job.infra.FlatFileDataPartitioner" scope="step">
		
		<property name="directoryName" value="#{#getInputFilePath(jobParameters[COUNTRYPRODUCT])}" />
		<property name= "originalFile" value="#{#getInputFilePath(jobParameters[COUNTRYPRODUCT])}" />
		<property name="splitFile" value="#{#getInputFilePath(jobParameters[COUNTRYPRODUCT])}" />
		<property name="archvFile" value="#{#getArchiveFilePath(jobParameters[COUNTRYPRODUCT])}" />
		<property name="evalContext" ref="customEvaluationContext" />
		<property name="filePattern" value="#{jobParameters[RNBW]}"/> 
		<property name="noOfRecordsPerSplit" value="100000"/> 
				<property name="startTime" value="#{jobParameters[STRT_TIME]}"></property> 
		<property name="jobName" value="#{jobParameters[JOB_NAME]}"></property>
	</bean>
	
	<batch:step id="hkRcPreRainbowDataProcessStep">
			<batch:tasklet allow-start-if-complete="false">
				<batch:chunk reader="hkRcPreRainbowCsvReader" processor = "hkRcPreRainbowDataProcessor"
					writer="hkRcCsvFileItemWriter" commit-interval="10000" skip-limit="50000">
					<batch:skippable-exception-classes>
						<batch:include
							class="com.citi.retail.optima.etl.common.exception.OptimaRetailDataException" />
					</batch:skippable-exception-classes>
				</batch:chunk>
			</batch:tasklet>
			
			<batch:listeners>
				<batch:listener ref="hkRcPreRainbowEnrichmentProcessor" />
				<batch:listener ref="hkRcPreRainbowAggregationProcessor" />
				<batch:listener ref="hkRcCsvFileItemWriter" />
				<batch:listener ref="rcAlscommonBalanceWriter" />
				<batch:listener ref="hkRcPreRainbowCsvReader" />
			</batch:listeners>
	</batch:step>
	
	<bean id="hkRcPreRainbowCsvReader"
		class="com.citi.retail.optima.etl.batch.job.reader.CustomItemReader"
		scope="step" lazy-init="true">
<!-- 		<property name="linesToSkip" value="1"/> -->
		<property name="strict" value="true"></property>
		<property name="resource" value="#{stepExecutionContext[fileName]}"></property>
		<property name= "fileName" value="#{stepExecutionContext[fileName]}"></property>
		<property name="lineMapper">
			<bean class="org.springframework.batch.item.file.mapping.DefaultLineMapper">
				<property name="lineTokenizer">
					<bean
						class="org.springframework.batch.item.file.transform.DelimitedLineTokenizer">
						
						<property name="delimiter" value="|"/>
						<property name="names"
							value="#{#getFileColumnNameList('HK_RC_RNBW')}" />	
					</bean>
				</property>
				<property name="fieldSetMapper">
						<bean class="com.citi.retail.optima.etl.batch.job.mapper.HkRcRnbwFieldSetMapper">
							<property name="dateFormat" ref="dateFormat_yyyy-MM-dd"/>
						</bean>
				</property>
			</bean>
		</property>
	</bean>
	
	<bean id="hkRcPreRainbowDataProcessor"
		class="org.springframework.batch.item.support.CompositeItemProcessor"
		scope="step">
		<property name="delegates">
			<util:list>
				<ref bean="hkRcPreRainbowEnrichmentProcessor" />
				<ref bean="hkRcPreRainbowAggregationProcessor" />
			</util:list>
		</property>
	</bean>
	
	<bean id="hkRcPreRainbowEnrichmentProcessor"
		class="com.citi.retail.optima.etl.batch.job.processor.EnrichmentProcessor"
		scope="step" p:enrichmentServiceBean-ref="hkRcPreRainbowEnrichmentService"
		p:timeTracker-ref="timeTracker">
		<property name="batchInstanceId" value="#{jobParameters[batchInstanceId]}" />
		<property name="jobName" value="#{jobParameters[JOB_NAME]}"/>
		<property name="fileName" value="#{stepExecutionContext[fileName]}"></property>
		<property name="jobConfigDao" ref="jobConfigDao" />
	</bean>
	
	<bean id="hkRcPreRainbowEnrichmentService"
		class="com.citi.retail.optima.etl.enrichment.impl.EnrichmentServiceImpl"
		p:evalContext-ref="customEvaluationContext"
		p:enrichmentRules-ref="enrichmentRulesHolder"
		p:keyList="#{#getConcatenatedKeys(jobParameters[sys_proc_id], 'hkRcPreRainbowDataProcessStep', null)}"
		scope="step"
	/>
	
	<bean name="hkRcPreRainbowAggregationProcessor"
		class="com.citi.retail.optima.etl.batch.job.processor.AggregationProcessor"
		init-method="init" scope="step">
		<property name="aggregationServiceFactory" ref="aggregationServiceFactory" />
		<property name="batchInstanceId" value="#{jobParameters[batchInstanceId]}" />
		<property name="monthEndDate" value="#{jobParameters[reportDate]}" />
		<property name="keyList"
			value="#{#getConcatenatedKeys(jobParameters[sys_proc_id], 'hkRcPreRainbowDataProcessStep',null)}" />
		<property name="stepName" value="hkRcPreRainbowDataProcessStep" />
		<property name="accountTraceabilityRequired" value="false" />
		<property name="timeTracker" ref="timeTracker" />
		<property name="sysProcId" value="#{jobParameters[sys_proc_id]}" />
	</bean>
	
	
	<!-- *********************************************** Pre Rainbow Step Configuration=END ***************************************************** -->
	<!-- *********************************************** Rainbow Aggregation Step Configuration=START ***************************************************** -->
	
	<bean name="hkRcPreRainbowproccrAggregationResultsTasklet" class="com.citi.retail.optima.etl.batch.tasklet.FooterSummaryAggregationResultTasklet"
		scope="step">
		<property name="aggregationServiceFactory" ref="aggregationServiceFactory" />
		<property name="batchInstanceId" value="#{jobParameters[batchInstanceId]}" />
		<property name="stepName" value="hkRcPreRainbowDataProcessStep" />
		<property name="sysProcId" value="#{jobParameters[sys_proc_id]}" />
		<property name="footerAggrRuleId" value="108" />
		<property name="footerItemList" ref="rcFooterItemList" />
		<property name="aggrFooterWriter" ref="rcAggrFooterWriter"/>
		<property name="jobConfigDao" ref="jobConfigDao" />
	</bean>
	
	<!-- *********************************************** Rainbow Aggregation Step Configuration=END ***************************************************** -->
	
	<!-- *********************************************** Preprocessor tasklet Start *****************************************************-->
      <bean name="hkRcRegisterPreprocessLoader"
		class="com.citi.retail.optima.etl.batch.tasklet.PreprocessRegister"
		scope="step" init-method="init">
		<property name="preprocessDataService" ref="preprocessDataServiceFact" />
		<property name="providerList">
			<util:list>
				<ref bean="preprocessHkRcFicoDataProvider" />
				<ref bean="preprocessHkRcWoDataProvider" />
				<ref bean="preprocessHkRcRecvDataProvider" />
				<ref bean="preprocessHkRcNewCommitDataProvider" />
				<ref bean="preprocessHkRcDelqDataProvider" />
				<ref bean="preprocessHkRcCrdTransferDataProvider" />
			</util:list>
		</property>
		<property name="keyList">
			<util:list>
				<value>ficoDataProcessStep</value>
				<value>woDataProcessStep</value>
				<value>recvDataProcessStep</value>
				<value>newCommitDataProcessStep</value>
				<value>delqDataProcessStep</value>
				<value>crdTransferDataProcessStep</value>
			</util:list>
		</property>
	</bean>
	<!-- *********************************************** Preprocessor tasklet End *****************************************************-->
	
  <bean name="hkRcFileMergeTasklet" class="com.citi.retail.optima.etl.batch.tasklet.FileMergeTasklet"
		scope="step">
		<property name="footerItemList" ref="rcFooterItemList" />
		<property name="header" value="HDR#{jobParameters[currentDate]}#{jobParameters[dateOfInfo]}" />
		<property name="format" value="%3s%09d%-10s%018d" />
		<property name="auditFileId" value="#{jobParameters[AUDITFILEID]}"/>
<!-- 		<property name="auditFiles" value="#{jobParameters[AUDITFILES]}"/> -->
		<property name="rainbowFileName" value="#{jobParameters[RNBW]}"/>
		<property name="queryExec" ref="queryExecutor"/>
		<property name="jobMessageDao" ref="jobMessageDao"/>	
		<property name="outputDirectory" value="#{#getOutputFilePath(jobParameters[COUNTRYPRODUCT])}" />
		<property name="inputDirectory" value="#{#getInputFilePath(jobParameters[COUNTRYPRODUCT])}" />
		<property name="archiveDirectory" value="#{#getArchiveFilePath(jobParameters[COUNTRYPRODUCT])}" />
		<property name="batchInstanceId" value="#{jobParameters[batchInstanceId]}" />
		<property name="jobConfigDao" ref="jobConfigDao" />
	</bean>	
	
</beans>