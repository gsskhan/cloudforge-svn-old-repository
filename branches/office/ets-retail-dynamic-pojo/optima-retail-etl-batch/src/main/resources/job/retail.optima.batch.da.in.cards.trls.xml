<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:p="http://www.springframework.org/schema/p" xmlns:c="http://www.springframework.org/schema/c"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:batch="http://www.springframework.org/schema/batch" xmlns:util="http://www.springframework.org/schema/util"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
		http://www.springframework.org/schema/beans/spring-beans-2.5.xsd
		http://www.springframework.org/schema/util 
		http://www.springframework.org/schema/util/spring-util-2.5.xsd
		http://www.springframework.org/schema/context
		http://www.springframework.org/schema/context/spring-context.xsd
		http://www.springframework.org/schema/batch 
		http://www.springframework.org/schema/batch/spring-batch-2.1.xsd
		http://www.springframework.org/schema/aop
 		http://www.springframework.org/schema/aop/spring-aop-2.5.xsd">


	<!-- *********************************************** India Cards JOB Configuration=START ***************************************************** -->
	<batch:job id="DA-IN-CRD-Batch" job-repository="jobRepository" restartable="true" incrementer="jobParamIncrementer">
		<batch:step id="springStart" next="fxrateProcessStep">
			<batch:tasklet ref="timerTaskletBegin" />
		</batch:step>	
		<batch:step id="fxrateProcessStep" parent="fxrateDataProcessStep"
			next="inCrdCbFinanceDataProcessStep" />	
			<batch:step id="inCrdCbFinanceDataProcessStep" parent="cbFinanceDataProcessStep" next="inCrdProcessStep" />		
		<batch:step id="inCrdProcessStep" parent="inCrdProcessStep:master"  
			next="inCrdAggregationStep" />
		<batch:step id="inCrdAggregationStep" next="inCrdFileMergeStep" >
			<batch:tasklet ref="inCrdAggregationResultsTasklet" />
		</batch:step>				
		<batch:step id="inCrdFileMergeStep" next="endSpringStep" >
			<batch:tasklet ref="inCrdFileMergeTasklet" />
			<batch:listeners>
				<batch:listener ref="inCrdFileMergeTasklet"/>
			</batch:listeners>
		</batch:step>
		
		<batch:step id="endSpringStep">
			<batch:tasklet ref="timerTaskletEnd" />
		</batch:step>		
		
		<batch:listeners>
			<batch:listener ref="inCrdAcqGcbcJobListener" />
		</batch:listeners>
		
	</batch:job>
			
	<bean id="inCrdAcqGcbcJobListener"
		class="com.citi.optima.retail.batch.listeners.DataAcqJobListener">
		<property name="batchJobInstanceDao" ref="jobInstanceDao" />
		<property name="internalMessageChannel" ref="batchCompletionHandlerChannel" />
		<property name="errorReportHandler">
			<bean class="com.citi.retail.optima.etl.batch.report.ErrorReportHandler" />
		</property>
		<property name="jobConfigDao" ref="jobConfigDao" />
<!-- 		<property name="footerItemList" ref="crdFooterItemList" /> -->
	</bean>

	
	<!-- *********************************************** India Cards Step Configuration=START ***************************************************** -->
	<bean name="inCrdProcessStep:master"
		class="org.springframework.batch.core.partition.support.PartitionStep">
		<property name="jobRepository" ref="jobRepository" />
		<property name="stepExecutionSplitter">
			<bean
				class="org.springframework.batch.core.partition.support.SimpleStepExecutionSplitter">
				<constructor-arg ref="jobRepository" />
				<constructor-arg ref="inCrdDataProcStep" />
				<constructor-arg ref="inCrdPartitioner" />
			</bean>
		</property>
		<property name="partitionHandler">
			<bean
				class="org.springframework.batch.core.partition.support.TaskExecutorPartitionHandler"
				scope="step">
				<property name="taskExecutor">
					<bean
						class="org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor">
						<property name="corePoolSize" value="8" />
						<property name="maxPoolSize" value="12" />
					</bean>
				</property>
				<property name="step" ref="inCrdDataProcStep" />
				<property name="gridSize" value="8" />
			</bean>
		</property>
	</bean>

	<bean id="inCrdPartitioner"
		class="com.citi.retail.optima.etl.batch.job.infra.FlatFileDataPartitioner"
		scope="step">
		<property name="directoryName" value="#{#getInputFilePath(jobParameters[COUNTRYPRODUCT])}" />
		<property name= "originalFile" value="#{#getInputFilePath(jobParameters[COUNTRYPRODUCT])}" />
		<property name="splitFile" value="#{#getInputFilePath(jobParameters[COUNTRYPRODUCT])}" />
		<property name="archvFile" value="#{#getArchiveFilePath(jobParameters[COUNTRYPRODUCT])}" />
		<property name="evalContext" ref="customEvaluationContext" />
		<property name="filePattern" value="#{jobParameters[IN_CARDS]}" />
		<property name="noOfRecordsPerSplit" value="100000" />
				<property name="startTime" value="#{jobParameters[STRT_TIME]}"></property> 
		<property name="jobName" value="#{jobParameters[JOB_NAME]}"></property>
	</bean>

	<batch:step id="inCrdDataProcStep">
		<batch:tasklet allow-start-if-complete="false">
			<batch:chunk reader="inCrdCsvReader" processor="inCrdDataProcessor"
				writer="inCrdCsvWriter" commit-interval="10000" skip-limit="50000">
				<batch:skippable-exception-classes>
					<batch:include
						class="com.citi.retail.optima.etl.common.exception.OptimaRetailDataException" />
				</batch:skippable-exception-classes>
			</batch:chunk>
		</batch:tasklet>
		
		<batch:listeners>
			<batch:listener ref="inCrdEnrichmentProcessor" />
			<batch:listener ref="inCrdAggregationProcessor" />
			<batch:listener ref="inCrdCsvWriter" />
			<batch:listener ref="commonBalanceWriter" />
			<batch:listener ref="inCrdCsvReader" />
		</batch:listeners>
	</batch:step>

	<bean id="inCrdCsvReader" class="com.citi.retail.optima.etl.batch.job.reader.CustomItemReader"
		scope="step" lazy-init="true">
<!-- 		<property name="linesToSkip" value="1" /> -->
		<property name="strict" value="true"></property>
		<property name="resource" value="#{stepExecutionContext[fileName]}"></property>
		<property name= "fileName" value="#{stepExecutionContext[fileName]}"></property>
		<property name="lineMapper">
			<bean class="org.springframework.batch.item.file.mapping.DefaultLineMapper">
				<property name="lineTokenizer">
					<bean
						class="org.springframework.batch.item.file.transform.DelimitedLineTokenizer">

						<property name="delimiter" value="|" />
						<property name="names" value="#{#getFileColumnNameList('IN_CARDS_RNBW')}"/>
<!-- 							value ="crdAcctNbr,alopEmi,dtAnr,dtEnr1,dtEverDpdHistory,dtGcl1, -->
<!-- 							dtGcl12,dtGrossNewRecov,dtGwo,dtGwoCnt,dtLope,dtLope1,dtMisDate, -->
<!-- 							dtNcl,dtPrevDelqCnt,dtPrevDelqFlag,dtPrevLope1,dtSalesCa,dtSalesPu, -->
<!-- 							dtTotalGcl,dtTotalRecov,dwAnnInc,dwBillAcctFlag,dwBilledCa, -->
<!-- 							dwBilledTotal,dwCardAquSource,dwCardCustNm,dwCardDelqStr, -->
<!-- 							dwCardMemType,dwCardNbr,dwCardType,dwCashLine,dwCollDeliqCnt, -->
<!-- 							dwCollDeliqCnt1,dwCorMemSince,dwCredLine,dwDelqStrVal,dwInt1, -->
<!-- 							dwMemSince,dwMemo,dwMemoDate,dwMinMembSince,dwMonthlyInc, -->
<!-- 							dwOpenFlag,dwPrimaryFlag,dwPrinCa,dwPrinCa1,dwPrinPur,dwPrinPur1, -->
<!-- 							dwSwapCardNo,dwSwapDt,dwWriteOffFlag,memSince,tr400BilledCa, -->
<!-- 							tr400BilledInt,tr400BilledOc,tr400BilledPu,tr400BilledTotal, -->
<!-- 							tr400CurrAdjCr,tr400CurrCaInt,tr400CurrCaOs,tr400CurrOcOs, -->
<!-- 							tr400CurrPuInt,tr400CurrPuOs,tr400DeliqCnt,tr400Memo,tr400MemoDt, -->
<!-- 							tr400PrincipalCa,tr400PrincipalOc,tr400PrincipalPu,dwDob, -->
<!-- 							dwCardCustNbr,cards,memDt,flag,custNbr,finalMemSince,finalParental, -->
<!-- 							vinMth,currYear,currMth,bkingYear,bkingMth,age,varAge,varVintage, -->
<!-- 							loanOut,g24Flg,setSf,gclSf,finGcl,st,adjFact,finRec,adjRec, -->
<!-- 							rndFinalScore,cardsType" /> -->
					</bean>
  				</property>
				<property name="fieldSetMapper">
					<bean
						class="com.citi.retail.optima.etl.batch.job.mapper.InCardsRnbwFieldSetMapper">
						<property name="dateFormat" ref="dateFormat_timestamp"/>
					</bean>
		</property>
			</bean>
		</property>
	</bean>
		
	<bean id="inCrdDataProcessor"
		class="org.springframework.batch.item.support.CompositeItemProcessor"
		scope="step">
		<property name="delegates">
			<util:list>
				<ref bean="inCrdEnrichmentProcessor" />
				<ref bean="inCrdAggregationProcessor" />
			</util:list>
		</property>
	</bean>
	
		<bean id="inCrdEnrichmentProcessor"
		class="com.citi.retail.optima.etl.batch.job.processor.EnrichmentProcessor"
		scope="step" 
		p:enrichmentServiceBean-ref="inCrdEnrichmentService"
		p:timeTracker-ref="timeTracker">
		<property name="batchInstanceId" value="#{jobParameters[batchInstanceId]}" />
		<property name="jobName" value="#{jobParameters[JOB_NAME]}"/>
		<property name="fileName" value="#{stepExecutionContext[fileName]}"></property>
		<property name="auditFileId" value="#{jobParameters[AUDITFILEID]}"/>
		<property name="auditFiles" value="#{jobParameters[AUDITFILES]}"/>
		<property name="jobMessageDao" ref="jobMessageDao"/>	
		<property name="eTLQueryExecutor" ref="queryExecutor" />	
		<property name="ctlFileDt" value="#{jobParameters[CTLFILECREATIONDT]}"/>
		<property name="jobConfigDao" ref="jobConfigDao" />
	</bean>
	
	<bean	id="inCrdEnrichmentService"
			class="com.citi.retail.optima.etl.enrichment.impl.EnrichmentServiceImpl"
			p:evalContext-ref="customEvaluationContext"
			p:enrichmentRules-ref="enrichmentRulesHolder"
			p:keyList="#{#getConcatenatedKeys(jobParameters[sys_proc_id], 'inCrdDataProcStep', null)}" 
			scope="step"/>
	
	
	<bean name="inCrdAggregationProcessor"
		class="com.citi.retail.optima.etl.batch.job.processor.AggregationProcessor"
		init-method="init" scope="step">
		<property name="aggregationServiceFactory" ref="aggregationServiceFactory" />
		<property name="batchInstanceId" value="#{jobParameters[batchInstanceId]}" />
		<property name="monthEndDate" value="#{jobParameters[reportDate]}" />
		<property name="keyList"
			value="#{#getConcatenatedKeys(jobParameters[sys_proc_id], 'inCrdDataProcStep',null)}" />
		<property name="stepName" value="inCrdDataProcStep" />
		<property name="accountTraceabilityRequired" value="false" />
		<property name="timeTracker" ref="timeTracker" />
		<property name="sysProcId" value="#{jobParameters[sys_proc_id]}" />
	</bean>
	
	<bean name="inCrdAggregationResultsTasklet" class="com.citi.retail.optima.etl.batch.tasklet.FooterSummaryAggregationResultTasklet"
		scope="step">
		<property name="aggregationServiceFactory" ref="aggregationServiceFactory" />
		<property name="batchInstanceId" value="#{jobParameters[batchInstanceId]}" />
		<property name="stepName" value="inCrdDataProcStep" />
		<property name="sysProcId" value="#{jobParameters[sys_proc_id]}" />
		<property name="footerAggrRuleId" value="102" />
		<property name="footerItemList" ref="crdFooterItemList" />
		<property name="aggrFooterWriter" ref="inCrdaggrFooterWriter"/>
		<property name="jobConfigDao" ref="jobConfigDao" />
	</bean>
	
	<bean id="inCrdaggrFooterWriter" class="org.springframework.batch.item.file.FlatFileItemWriter">
	
 	<property name="lineAggregator">
	  <bean class="org.springframework.batch.item.file.transform.FormatterLineAggregator" >
	  	<property name="fieldExtractor">
	  		<bean class="org.springframework.batch.item.file.transform.BeanWrapperFieldExtractor">
	  			<property name="names" value="writeCount,hashFileType,aggregatedHashValue"/>
	  		</bean>
	  	</property>
	  	<property name="format" value="TRL%09d%-10s%018d"></property>
	  </bean>
	</property>
  </bean>
  
  <bean id="inCrdCsvWriter" class="com.citi.retail.optima.etl.batch.job.writer.ConditionalCompositeItemWriter" scope="step">
		<property name="delegates">
			<util:list>
				 <!-- <ref bean="arrangementIpWriter"/>  -->
 				<ref bean="arrangementIpRatingWriter"/>
<!-- 				<ref bean="arrangementRateWithoutSplitWriter"/>
 --><!-- 				<ref bean="commonBalanceWithoutSplitWriter"/> -->
 
 <ref bean="commonBalanceWriter"/>
<!-- 				<ref bean="indicativeFileWriter"/> -->
<ref bean="inIndicativeFileWriter"/>
	<!-- 			<ref bean="arrngLossMitgWriter"/>
				<ref bean="guarnteeInsurWriter"/>
				<ref bean="arrngEventWriter"/> -->
			</util:list>
		</property>
	</bean>
	<bean id="dateFormat_timestamp" class="java.text.SimpleDateFormat" scope="prototype">
		<constructor-arg value="ddMMMyyyy:HH:mm:ss" />
	</bean>
	
	<bean name="inCrdFileMergeTasklet" class="com.citi.retail.optima.etl.batch.tasklet.FileMergeTasklet"
		scope="step">
		<property name="footerItemList" ref="crdFooterItemList" />
		<property name="header" value="HDR#{jobParameters[currentDate]}#{jobParameters[dateOfInfo]}" />
		<property name="format" value="%3s%09d%-10s%018d" />
		<!-- 		<property name="batchInstanceId" value="#{jobParameters[batchInstanceId]}" /> -->
		<!-- <property name="jobName" value="#{jobParameters[JOB_NAME]}"/> -->
		<!-- <property name="fileName" value="#{stepExecutionContext[fileName]}"></property> -->
		<property name="auditFileId" value="#{jobParameters[AUDITFILEID]}"/>
<!-- 		<property name="auditFiles" value="#{jobParameters[AUDITFILES]}"/> -->
		<property name="rainbowFileName" value="#{jobParameters[IN_CARDS]}"/>
		<property name="queryExec" ref="queryExecutor"/>
		<property name="jobMessageDao" ref="jobMessageDao"/>	
		<property name="outputDirectory" value="#{#getOutputFilePath(jobParameters[COUNTRYPRODUCT])}" />
		<property name="inputDirectory" value="#{#getInputFilePath(jobParameters[COUNTRYPRODUCT])}" />
		<property name="archiveDirectory" value="#{#getArchiveFilePath(jobParameters[COUNTRYPRODUCT])}" />
		<property name="batchInstanceId" value="#{jobParameters[batchInstanceId]}" />
		<property name="jobConfigDao" ref="jobConfigDao" />
	</bean>
	
	<!-- *********************************************** India Cards Step Configuration=END ***************************************************** -->
</beans>