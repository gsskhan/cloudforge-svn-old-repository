<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:p="http://www.springframework.org/schema/p" xmlns:c="http://www.springframework.org/schema/c"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:batch="http://www.springframework.org/schema/batch" xmlns:util="http://www.springframework.org/schema/util"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
		http://www.springframework.org/schema/beans/spring-beans-2.5.xsd
		http://www.springframework.org/schema/util 
		http://www.springframework.org/schema/util/spring-util-2.5.xsd
		http://www.springframework.org/schema/context
		http://www.springframework.org/schema/context/spring-context.xsd
		http://www.springframework.org/schema/batch 
		http://www.springframework.org/schema/batch/spring-batch-2.1.xsd
		http://www.springframework.org/schema/aop
 		http://www.springframework.org/schema/aop/spring-aop-2.5.xsd">
 		
 		<!-- *********************************************** TW JOB Configuration =START ***************************************************** -->

	<batch:job id="DA-TW-CRD-Batch" job-repository="jobRepository" restartable="true" incrementer="jobParamIncrementer">
		<batch:step id="springStart" next="registerPreprocessLoaderStep">
			<batch:tasklet ref="timerTaskletBegin" />
		</batch:step>
		<batch:step id="registerPreprocessLoaderStep" next="twCrdFxrateProcessStep">
			<batch:tasklet ref="registerPreprocessLoader" />
		</batch:step>
		<batch:step id="twCrdFxrateProcessStep" parent="fxrateDataProcessStep"
			next="twCrdCbFinanceDataProcessStep" />
		<batch:step id="twCrdCbFinanceDataProcessStep" parent="cbFinanceDataProcessStep" next="twCrdTdrProcessStep" />
		<batch:step id="twCrdTdrProcessStep" parent="twCrdTdrPrepropStep:master"
			next="twCrdFicoProcessStep" />
		<batch:step id="twCrdFicoProcessStep" parent="twCrdFicoPrepropStep:master"
			next="twCrdNtbProcessStep" />
		<batch:step id="twCrdNtbProcessStep" parent="twCrdNtbPrepropStep:master"
			next="twCrdWoProcessStep" />
		<batch:step id="twCrdWoProcessStep" parent="twCrdWoPrepropStep:master"
			next="twCrdEppProcessStep" />
		<batch:step id="twCrdEppProcessStep" parent="twCrdEppPrepropStep:master"
			next="twCrdRecvProcessStep" />
		<batch:step id="twCrdRecvProcessStep" parent="twCrdRecvPrepropStep:master"
			next="twCrdBoocPrepropStep" />
 		<batch:step id="twCrdBoocPrepropStep" parent="twCrdBoocPrepropStep:master" next="twCrdRainbowproccrDecider" />
		<batch:decision id="twCrdRainbowproccrDecider" decider="twCrdRainbowDeciderStep">
	        <batch:next on="preRainbow" to="twCrdPreRainbowproccrStep" />
	        <batch:next on="postRainbow" to="twCrdRainbowproccrStep" />
    	</batch:decision>    	
    	
		<batch:step id="twCrdPreRainbowproccrStep" parent="twCrdPreRainbowproccrStep:master"
			next="twCrdPreRainbowproccrAggregationStep" /> 		
 		<batch:step id="twCrdRainbowproccrStep" parent="twCrdRainbowproccrStep:master"
			next="twCrdRainbowproccrAggregationStep" />	
					
		<batch:step id="twCrdRainbowproccrAggregationStep" next="twCrdFileMergeStep" >
			<batch:tasklet ref="twCrdRainbowproccrAggregationResultsTasklet" />
		</batch:step>		
		<batch:step id="twCrdPreRainbowproccrAggregationStep" next="twCrdFileMergeStep" >
			<batch:tasklet ref="twCrdPreRainbowproccrAggregationResultsTasklet" />
		</batch:step>
		
		<batch:step id="twCrdFileMergeStep" next="endSpringStep" >
			<batch:tasklet ref="twCrdFileMergeTasklet" />
			<batch:listeners>
				<batch:listener ref="twCrdFileMergeTasklet"/>
			</batch:listeners>
		</batch:step>

		<batch:step id="endSpringStep">
			<batch:tasklet ref="timerTaskletEnd" />
		</batch:step>		
		<batch:listeners>
			<batch:listener ref="twAcqGcbcJobListener" />
		</batch:listeners>
	</batch:job>

	<bean id="dateFormat" class="java.text.SimpleDateFormat">
		<constructor-arg value="yyyy-MM-dd" />
	</bean>
			
	<bean id="twCrdRainbowDeciderStep" 
		class="com.citi.retail.optima.etl.batch.decider.RainbowproccrDecider" >
		<property name="startDate">
			<bean factory-bean="dateFormat_yyyy-MM-dd" factory-method="parse">
				<constructor-arg value="2007-01-01" />
			</bean>
		</property>
		<property name="endDate">
			<bean factory-bean="dateFormat_yyyy-MM-dd" factory-method="parse">
				<constructor-arg value="2012-10-31" />
			</bean>
		</property>
	</bean>
	
	<bean id="twAcqGcbcJobListener"
		class="com.citi.optima.retail.batch.listeners.DataAcqJobListener">
		<property name="batchJobInstanceDao" ref="jobInstanceDao" />
		<property name="internalMessageChannel" ref="batchCompletionHandlerChannel" />
		<property name="errorReportHandler">
			<bean class="com.citi.retail.optima.etl.batch.report.ErrorReportHandler" />
		</property>
		<property name="preProcessorFactory" ref="preProcessorDataServiceFactory" />
		<property name="dataServiceName" value="com.citi.optima.retail.batch.preprocess.TwCardsDataServiceImpl" />
		<property name="jobConfigDao" ref="jobConfigDao" />
<!-- 		<property name="footerItemList" ref="twCrdFooterItemList" /> -->
	</bean>
	
		<bean id="dataAcqWriter"
		class="com.citi.retail.optima.etl.batch.job.writer.DummyItemWriter">

	</bean>
	
	
 	<bean id="twCardsProcessDataProvider"
		class="com.citi.optima.retail.batch.preprocess.PreProcessDataProviderImpl"
		depends-on="twDataService" scope="step">
		<property name="preprocessFicoMap" value="#{(twDataService.getLocalPreProcessorDataServiceMap('ficoDataProcessStep'))}"/>
	</bean>
	
	<!-- *********************************************** TW JOB Configuration =END ***************************************************** -->
	
	<!-- *********************************************** TW JOB Data Service = START ***************************************************** -->
	<util:map id="jobParamsMap" key-type="java.lang.String"
		value-type="java.lang.Object"
		map-class="java.util.concurrent.ConcurrentHashMap" scope="step">
		<entry key="reportDate" value="#{jobParameters[reportDate]}"/>
		<entry key="dateOfInfo" value="#{jobParameters[dateOfInfo]}"/>
	</util:map>
	
	<!-- *********************************************** TW JOB Data Service = END ***************************************************** -->
	
	
	<!-- *********************************************** Common Beans = START ***************************************************** -->
	
	<bean id="dateEditor"
		class="org.springframework.beans.propertyeditors.CustomDateEditor" scope="step">
		<constructor-arg>
			<bean class="java.text.SimpleDateFormat">
				<constructor-arg value="ddMMMyyyy" />
			</bean>
		</constructor-arg>
		<constructor-arg value="true" />
	</bean>
	
	<bean id="dateEditor1"
		class="org.springframework.beans.propertyeditors.CustomDateEditor" scope="step">
		<constructor-arg>
			<bean class="java.text.SimpleDateFormat">
				<constructor-arg value="mm/dd/yy" />
			</bean>
		</constructor-arg>
		<constructor-arg value="true" />
	</bean>
	
	<bean id="dateEditor2"
		class="org.springframework.beans.propertyeditors.CustomDateEditor" scope="step">
		<constructor-arg>
			<bean class="java.text.SimpleDateFormat">
				<constructor-arg value="yyyy-mm-dd" />
			</bean>
		</constructor-arg>
		<constructor-arg value="true" />
	</bean>
	
	
	<bean id="format_ddMMMyyyy" class="java.text.SimpleDateFormat" scope="prototype">
		<constructor-arg value="ddMMMyyyy" />
	</bean>
	
	<bean id="format_mm_dd_yy" class="java.text.SimpleDateFormat" scope="prototype">
		<constructor-arg value="mm/dd/yy" />
	</bean>
	
	<bean id="dateFormat_yyyy-MM-dd" class="java.text.SimpleDateFormat" scope="prototype">
		<constructor-arg value="yyyy-MM-dd" />
	</bean>
	
	<bean id="dateFormat_yyyymm" class="java.text.SimpleDateFormat" scope="prototype">
		<constructor-arg value="yyyymm" />
	</bean>
	<!-- *********************************************** Common Beans = END ***************************************************** -->
	
	<!-- *********************************************** TDR Step Configuration=START ***************************************************** -->
	<bean name="twCrdTdrPrepropStep:master"
		class="org.springframework.batch.core.partition.support.PartitionStep">
		<property name="jobRepository" ref="jobRepository" />
		<property name="stepExecutionSplitter">
			<bean
				class="org.springframework.batch.core.partition.support.SimpleStepExecutionSplitter">
				<constructor-arg ref="jobRepository" />
				<constructor-arg ref="twCrdTdrDataProcessStep" />
				<constructor-arg ref="twCrdTdrPartitioner" />
			</bean>
		</property>
		<property name="partitionHandler">
			<bean
				class="org.springframework.batch.core.partition.support.TaskExecutorPartitionHandler"
				scope="step">
				<property name="taskExecutor">
					<bean
						class="org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor">
						<property name="corePoolSize" value="8" />
						<property name="maxPoolSize" value="12" />
					</bean>
				</property>
				<property name="step" ref="twCrdTdrDataProcessStep" />
				<property name="gridSize" value="8" />
			</bean>
		</property>
	</bean>
	
	<bean id="twCrdTdrPartitioner" class="com.citi.retail.optima.etl.batch.job.infra.FlatFileDataPartitioner" scope="step">
		<property name="directoryName" value="#{#getInputFilePath(jobParameters[COUNTRYPRODUCT])}" />
		<property name= "originalFile" value="#{#getInputFilePath(jobParameters[COUNTRYPRODUCT])}" />
		<property name="splitFile" value="#{#getInputFilePath(jobParameters[COUNTRYPRODUCT])}" />
		<property name="archvFile" value="#{#getArchiveFilePath(jobParameters[COUNTRYPRODUCT])}" />
		<property name="evalContext" ref="customEvaluationContext" />
		<property name="filePattern" value="#{jobParameters[TDR]}"/> 
		<property name="noOfRecordsPerSplit" value="100000"/>
		<property name="startTime" value="#{jobParameters[STRT_TIME]}"></property> 
		<property name="jobName" value="#{jobParameters[JOB_NAME]}"></property>
		
	</bean>
	
	<batch:step id="twCrdTdrDataProcessStep">
			<batch:tasklet allow-start-if-complete="false">
				<batch:chunk reader="twCrdTdrCsvReader" processor="twCrdTdrAcqProcessor"
					writer="dataAcqWriter" commit-interval="1000" skip-limit="50000">
					<batch:skippable-exception-classes>
						<batch:include
							class="com.citi.retail.optima.etl.common.exception.OptimaRetailDataException" />
					</batch:skippable-exception-classes>
				</batch:chunk>
			</batch:tasklet>
	</batch:step>
	
	<bean id="twCrdTdrCsvReader"
		class="org.springframework.batch.item.file.FlatFileItemReader"
		scope="step" lazy-init="true">
		<property name="linesToSkip" value="1"/>
		<property name="resource" value="#{stepExecutionContext[fileName]}"></property>
		<property name="lineMapper">
			<bean class="org.springframework.batch.item.file.mapping.DefaultLineMapper">
				<property name="lineTokenizer">
					<bean
						class="org.springframework.batch.item.file.transform.DelimitedLineTokenizer">
						
						<property name="delimiter" value="|"/>
						<property name="names" value="cardNumber,updatedDate,accountOpenDate,tdrFlag"/>
			
							<!-- value="updatedDate,accountOpenDate,tdrFlag,cardNumber" /> -->
					</bean>
				</property>
				<property name="fieldSetMapper">
					<bean
						class="com.citi.retail.optima.etl.batch.job.mapper.TdrFieldSetMapper">
						<property name="dateFormat" ref="format_mm_dd_yy"/>
					</bean>
				</property>
				<!--  <property name="fieldSetMapper">
					<bean
						class="com.citi.retail.optima.etl.batch.job.mapper.SelectiveFieldSetMapper">
						<property name="prototypeBeanName" value="tdrRecord" />
						<property name="propertiesIncuded" value="updatedDate,tdrFlag,cardNumber"/>
						<property name="customEditors">
                        	<map>
                            	<entry key="java.util.Date">
                                	<ref local="dateEditor1" />
                                </entry>
                           </map>
                        </property>
                      </bean>
				</property> -->
			</bean>
		</property>
	</bean>
	
	<bean id="tdrRecord" class="com.citi.retail.optima.etl.common.model.TdrRecord" scope="prototype"/>
	
	<bean id="twCrdTdrAcqProcessor"
		class="com.citi.retail.optima.etl.batch.job.processor.da.TwSupportingDataProcessor"
		scope="step">
		<property name="dataService" ref="twDataService"/>
		<property name="preProcessMapName" value="twCrdTdrDataProcessStep"/>
	</bean>
	
	
	
	<!-- *********************************************** TDR Step Configuration=END ***************************************************** -->
	
	<!-- *********************************************** FICO Step Configuration=START ***************************************************** -->
	
	<bean name="twCrdFicoPrepropStep:master"
		class="org.springframework.batch.core.partition.support.PartitionStep">
		<property name="jobRepository" ref="jobRepository" />
		<property name="stepExecutionSplitter">
			<bean
				class="org.springframework.batch.core.partition.support.SimpleStepExecutionSplitter">
				<constructor-arg ref="jobRepository" />
				<constructor-arg ref="twCrdFicoDataProcessStep" />
				<constructor-arg ref="twCrdFicoPartitioner" />
			</bean>
		</property>
		<property name="partitionHandler">
			<bean
				class="org.springframework.batch.core.partition.support.TaskExecutorPartitionHandler"
				scope="step">
				<property name="taskExecutor">
					<bean
						class="org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor">
						<property name="corePoolSize" value="8" />
						<property name="maxPoolSize" value="12" />
					</bean>
				</property>
				<property name="step" ref="twCrdFicoDataProcessStep" />
				<property name="gridSize" value="8" />
			</bean>
		</property>
	</bean>
	

	<bean id="twCrdFicoPartitioner" class="com.citi.retail.optima.etl.batch.job.infra.FlatFileDataPartitioner" scope="step">
		<property name="directoryName" value="#{#getInputFilePath(jobParameters[COUNTRYPRODUCT])}" />
		<property name= "originalFile" value="#{#getInputFilePath(jobParameters[COUNTRYPRODUCT])}" />
		<property name="splitFile" value="#{#getInputFilePath(jobParameters[COUNTRYPRODUCT])}" />
		<property name="archvFile" value="#{#getArchiveFilePath(jobParameters[COUNTRYPRODUCT])}" />
		<property name="evalContext" ref="customEvaluationContext" />
		<property name="filePattern" value="#{jobParameters[FICO]}"/> 
		<property name="noOfRecordsPerSplit" value="100000"/> 
		<property name="startTime" value="#{jobParameters[STRT_TIME]}"></property> 
		<property name="jobName" value="#{jobParameters[JOB_NAME]}"></property>
	</bean>
	
	
	<batch:step id="twCrdFicoDataProcessStep">
			<batch:tasklet allow-start-if-complete="false">
				<batch:chunk reader="twCrdFicoCsvReader" processor="twCrdFicoAcqProcessor"
					writer="dataAcqWriter" commit-interval="1000" skip-limit="50000">
					<batch:skippable-exception-classes>
						<batch:include
							class="com.citi.retail.optima.etl.common.exception.OptimaRetailDataException" />	
					</batch:skippable-exception-classes>
				</batch:chunk>
			</batch:tasklet>
	</batch:step>
	
	
	
	<bean id="twCrdFicoCsvReader"
		class="org.springframework.batch.item.file.FlatFileItemReader"
		scope="step" lazy-init="true">
		<property name="linesToSkip" value="1"/>
		<property name="resource" value="#{stepExecutionContext[fileName]}"></property>
		<property name="lineMapper">
			<bean class="org.springframework.batch.item.file.mapping.DefaultLineMapper">
				<property name="lineTokenizer">
					<bean
						class="org.springframework.batch.item.file.transform.DelimitedLineTokenizer">
						
						<property name="delimiter" value="|"/>
						<property name="names"
							value="alignScore,cardNumber" />
					</bean>
				</property>
				<property name="fieldSetMapper">
					<bean
						class="com.citi.retail.optima.etl.batch.job.mapper.FicoFieldSetMapper">
						<property name="dateFormat" ref="format_ddMMMyyyy"/>
					</bean>
				</property>
			</bean>
		</property>
	</bean>
	
	<bean id="ficoPrototype" class="com.citi.retail.optima.etl.common.model.FicoRecord" scope="prototype"/>
	
	<bean id="twCrdFicoAcqProcessor"
		class="com.citi.retail.optima.etl.batch.job.processor.da.TwSupportingDataProcessor"
		scope="step">
		<property name="dataService" ref="twDataService"/>
		<property name="preProcessMapName" value="twCrdFicoDataProcessStep"/>
	</bean> 
	
	<!-- *********************************************** FICO Step Configuration=END ***************************************************** -->

	<!-- *********************************************** FXRATE Step Configuration=START ***************************************************** -->
	
<!-- 	<bean name="fxratePrepropStep:master"
		class="org.springframework.batch.core.partition.support.PartitionStep">
		<property name="jobRepository" ref="jobRepository" />
		<property name="stepExecutionSplitter">
			<bean
				class="org.springframework.batch.core.partition.support.SimpleStepExecutionSplitter">
				<constructor-arg ref="jobRepository" />
				<constructor-arg ref="fxrateDataProcessStep" />
				constructor-arg ref="fxratePartitioner" /
			</bean>
		</property>
				
		<property name="partitionHandler">
			<bean
				class="org.springframework.batch.core.partition.support.TaskExecutorPartitionHandler"
				scope="step">
				<property name="taskExecutor">
					<bean
						class="org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor">
						<property name="corePoolSize" value="8" />
						<property name="maxPoolSize" value="12" />
					</bean>
				</property>
				<property name="step" ref="fxrateDataProcessStep" />
				<property name="gridSize" value="8" />
			</bean>
		</property>
	</bean>
	

	<bean id="fxratePartitioner" class="com.citi.retail.optima.etl.batch.job.infra.FlatFileDataPartitioner" scope="step">
		<property name="directoryName" value="${filewatcher.input.directory}"/> 
		<property name="directoryName" value="//dev//shm//tmp//rnbw//"/> 
		<property name="filePattern" value="#{jobParameters[FXRATE]}"/> 
		<property name="noOfRecordsPerSplit" value="100000"/> 
		<property name="startTime" value="#{jobParameters[STRT_TIME]}"></property> 
		<property name="jobName" value="#{jobParameters[JOB_NAME]}"></property>

	</bean>
	
 -->	
	<batch:step id="fxrateDataProcessStep">
			<batch:tasklet allow-start-if-complete="false">
				<batch:chunk reader="fxrateCsvReader" processor="fxrateAcqProcessor"
					writer="dataAcqWriter" commit-interval="1000" skip-limit="50000">
					<batch:skippable-exception-classes>
						<batch:include
							class="com.citi.retail.optima.etl.common.exception.OptimaRetailDataException" />
					</batch:skippable-exception-classes>
				</batch:chunk>
			</batch:tasklet>
	</batch:step>
	
	
	
	<bean id="fxrateCsvReader"
		class="org.springframework.batch.item.file.FlatFileItemReader"
		scope="step" lazy-init="true">
		<property name="linesToSkip" value="1"/>
		<!-- <property name="resource" value="#{stepExecutionContext[fileName]}"></property> -->
		<property name="resource" value="file:#{#getInputFilePath(jobParameters[COUNTRYPRODUCT])}#{jobParameters[FXRATE]}"></property>
		
		<property name="lineMapper">
			<bean class="org.springframework.batch.item.file.mapping.DefaultLineMapper">
				<property name="lineTokenizer">
					<bean
						class="org.springframework.batch.item.file.transform.DelimitedLineTokenizer">
						
						<property name="delimiter" value="|"/>
						<property name="names"
							value="Unit,Scenario,Year,Period,LedgerUnit,Currency,CitiSource,DataClass,Acct,Rate" />
					</bean>
				</property>
				<property name="fieldSetMapper">
					<bean
						class="com.citi.retail.optima.etl.batch.job.mapper.FxRateFieldSetMapper">
						<property name="dateFormat" ref="format_ddMMMyyyy"/>
					</bean>
				</property>
			</bean>
		</property>
	</bean>
	
	<bean id="fxratePrototype" class="com.citi.retail.optima.etl.common.model.FxRateRecord" scope="prototype"/>
	
	<bean id="fxrateAcqProcessor"
		class="com.citi.retail.optima.etl.batch.job.processor.da.FxRateSupportingDataProcessor"
		scope="step">
		<property name="dataService" ref="twDataService"/>
		<property name="preProcessMapName" value="fxrateDataProcessStep"/>
	</bean>
	
	<!-- *********************************************** FXRATE Step Configuration=END ***************************************************** -->
	
	<!-- *********************************************** NTB Step Configuration=START ***************************************************** -->
	
	<bean name="twCrdNtbPrepropStep:master"
		class="org.springframework.batch.core.partition.support.PartitionStep">
		<property name="jobRepository" ref="jobRepository" />
		<property name="stepExecutionSplitter">
			<bean
				class="org.springframework.batch.core.partition.support.SimpleStepExecutionSplitter">
				<constructor-arg ref="jobRepository" />
				<constructor-arg ref="twCrdNtbDataProcessStep" />
				<constructor-arg ref="twCrdNtbPartitioner" />
			</bean>
		</property>
		<property name="partitionHandler">
			<bean
				class="org.springframework.batch.core.partition.support.TaskExecutorPartitionHandler"
				scope="step">
				<property name="taskExecutor">
					<bean
						class="org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor">
						<property name="corePoolSize" value="8" />
						<property name="maxPoolSize" value="12" />
					</bean>
				</property>
				<property name="step" ref="twCrdNtbDataProcessStep" />
				<property name="gridSize" value="8" />
			</bean>
		</property>
	</bean>
	
	<bean id="twCrdNtbPartitioner" class="com.citi.retail.optima.etl.batch.job.infra.FlatFileDataPartitioner" scope="step">
		<property name="directoryName" value="#{#getInputFilePath(jobParameters[COUNTRYPRODUCT])}" />
		<property name= "originalFile" value="#{#getInputFilePath(jobParameters[COUNTRYPRODUCT])}" />
		<property name="splitFile" value="#{#getInputFilePath(jobParameters[COUNTRYPRODUCT])}" />
		<property name="archvFile" value="#{#getArchiveFilePath(jobParameters[COUNTRYPRODUCT])}" />
		<property name="evalContext" ref="customEvaluationContext" />
		<property name="filePattern" value="#{jobParameters[NTB]}"/> 
		<property name="noOfRecordsPerSplit" value="100000"/> 
		<property name="startTime" value="#{jobParameters[STRT_TIME]}"></property> 
		<property name="jobName" value="#{jobParameters[JOB_NAME]}"></property>
	</bean>
	
	<batch:step id="twCrdNtbDataProcessStep">
			<batch:tasklet allow-start-if-complete="false">
				<batch:chunk reader="twCrdNtbCsvReader" processor="twCrdNtbAcqProcessor"
					writer="dataAcqWriter" commit-interval="1000" skip-limit="50000">
					<batch:skippable-exception-classes>
						<batch:include
							class="com.citi.retail.optima.etl.common.exception.OptimaRetailDataException" />
					</batch:skippable-exception-classes>
				</batch:chunk>
			</batch:tasklet>
	</batch:step>
	
	<bean id="twCrdNtbCsvReader"
		class="org.springframework.batch.item.file.FlatFileItemReader"
		scope="step" lazy-init="true">
		<property name="linesToSkip" value="1"/>  
		<property name="resource" value="#{stepExecutionContext[fileName]}"></property>
		<property name="lineMapper">
			<bean class="org.springframework.batch.item.file.mapping.DefaultLineMapper">
				<property name="lineTokenizer">
					<bean
						class="org.springframework.batch.item.file.transform.DelimitedLineTokenizer">
						
						<property name="delimiter" value="|"/>
						<property name="names" value="cardNumber,clmt"/>
							<!-- value="clmt,cardNumber" /> -->
					</bean>
				</property>
				<property name="fieldSetMapper">
					<bean
						class="com.citi.retail.optima.etl.batch.job.mapper.NtbFieldSetMapper">
						<property name="dateFormat" ref="format_ddMMMyyyy"/>
					</bean>
				</property>
				<!-- <property name="fieldSetMapper">
					<bean
						class="com.citi.retail.optima.etl.batch.job.mapper.SelectiveFieldSetMapper">
						<property name="prototypeBeanName" value="ntbPrototype" />
						<property name="propertiesIncuded" value="clmt,cardNumber"/>
					</bean>
				</property> -->
			</bean>
		</property>
	</bean>
	
	<bean id="ntbPrototype" class="com.citi.retail.optima.etl.common.model.NtbRecord" scope="prototype"/>
	
	<bean id="twCrdNtbAcqProcessor"
		class="com.citi.retail.optima.etl.batch.job.processor.da.TwSupportingDataProcessor"
		scope="step">
		<property name="dataService" ref="twDataService"/>
		<property name="preProcessMapName" value="twCrdNtbDataProcessStep"/>
	</bean>
	
	<!-- *********************************************** NTB Step Configuration=END ***************************************************** -->
	
	
	<!-- *********************************************** Write-off Step Configuration=START ***************************************************** -->
	
	<bean name="twCrdWoPrepropStep:master"
		class="org.springframework.batch.core.partition.support.PartitionStep">
		<property name="jobRepository" ref="jobRepository" />
		<property name="stepExecutionSplitter">
			<bean
				class="org.springframework.batch.core.partition.support.SimpleStepExecutionSplitter">
				<constructor-arg ref="jobRepository" />
				<constructor-arg ref="twCrdWoDataProcessStep" />
				<constructor-arg ref="twCrdWoPartitioner" />
			</bean>
		</property>
		<property name="partitionHandler">
			<bean
				class="org.springframework.batch.core.partition.support.TaskExecutorPartitionHandler"
				scope="step">
				<property name="taskExecutor">
					<bean
						class="org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor">
						<property name="corePoolSize" value="8" />
						<property name="maxPoolSize" value="12" />
					</bean>
				</property>
				<property name="step" ref="twCrdWoDataProcessStep" />
				<property name="gridSize" value="8" />
			</bean>
		</property>
	</bean>
	
	<bean id="twCrdWoPartitioner" class="com.citi.retail.optima.etl.batch.job.infra.FlatFileDataPartitioner" scope="step">
		<property name="directoryName" value="#{#getInputFilePath(jobParameters[COUNTRYPRODUCT])}" />
		<property name= "originalFile" value="#{#getInputFilePath(jobParameters[COUNTRYPRODUCT])}" />
		<property name="splitFile" value="#{#getInputFilePath(jobParameters[COUNTRYPRODUCT])}" />
		<property name="archvFile" value="#{#getArchiveFilePath(jobParameters[COUNTRYPRODUCT])}" />
		<property name="evalContext" ref="customEvaluationContext" />
		<property name="filePattern" value="#{jobParameters[WO]}"/> 
		<property name="noOfRecordsPerSplit" value="100000"/> 
		<property name="startTime" value="#{jobParameters[STRT_TIME]}"></property> 
		<property name="jobName" value="#{jobParameters[JOB_NAME]}"></property>
	</bean>
	
	
	<batch:step id="twCrdWoDataProcessStep">
			<batch:tasklet allow-start-if-complete="false">
				<batch:chunk reader="twCrdWoCsvReader" processor="twCrdWoAcqProcessor"
					writer="dataAcqWriter" commit-interval="1000" skip-limit="50000">
					<batch:skippable-exception-classes>
						<batch:include
							class="com.citi.retail.optima.etl.common.exception.OptimaRetailDataException" />							
					</batch:skippable-exception-classes>
				</batch:chunk>
			</batch:tasklet>
	</batch:step>
	
	<bean id="twCrdWoCsvReader"
		class="org.springframework.batch.item.file.FlatFileItemReader"
		scope="step" lazy-init="true">
		<property name="linesToSkip" value="1"/>
		<property name="resource" value="#{stepExecutionContext[fileName]}"></property>
		<property name="lineMapper">
			<bean class="org.springframework.batch.item.file.mapping.DefaultLineMapper">
				<property name="lineTokenizer">
					<bean
						class="org.springframework.batch.item.file.transform.DelimitedLineTokenizer">
						
						<property name="delimiter" value="|"/>
						
						<property name="names" value="accNumber,woP,woInd" />
							<!-- value="chargeOffIndicator,principleChargeOff,cardNumber" /> -->
							
					</bean>
				</property>
				<property name="fieldSetMapper">
					<bean
						class="com.citi.retail.optima.etl.batch.job.mapper.WoFieldSetMapper">
						<property name="dateFormat" ref="format_ddMMMyyyy"/>
					</bean>
				</property>
			<!-- 	<property name="fieldSetMapper">
					<bean
						class="com.citi.retail.optima.etl.batch.job.mapper.SelectiveFieldSetMapper">
						<property name="prototypeBeanName" value="woPrototype" />
						<property name="propertiesIncuded" value="chargeOffIndicator,principleChargeOff,cardNumber"/>
					</bean>
				</property>  -->
			</bean>
		</property>
	</bean>
	
	<bean id="woPrototype" class="com.citi.retail.optima.etl.common.model.WriteoffRecord" scope="prototype"/>
	
	<bean id="twCrdWoAcqProcessor"
		class="com.citi.retail.optima.etl.batch.job.processor.da.TwSupportingDataProcessor"
		scope="step">
		<property name="dataService" ref="twDataService"/>
		<property name="preProcessMapName" value="twCrdWoDataProcessStep"/>
	</bean>
	
	<!-- *********************************************** Write-off Step Configuration=END ***************************************************** -->
	
	<!-- *********************************************** EPP Step Configuration=START ***************************************************** -->
	
	<bean name="twCrdEppPrepropStep:master"
		class="org.springframework.batch.core.partition.support.PartitionStep">
		<property name="jobRepository" ref="jobRepository" />
		<property name="stepExecutionSplitter">
			<bean
				class="org.springframework.batch.core.partition.support.SimpleStepExecutionSplitter">
				<constructor-arg ref="jobRepository" />
				<constructor-arg ref="twCrdEppDataProcessStep" />
				<constructor-arg ref="twCrdEppPartitioner" />
			</bean>
		</property>
		<property name="partitionHandler">
			<bean
				class="org.springframework.batch.core.partition.support.TaskExecutorPartitionHandler"
				scope="step">
				<property name="taskExecutor">
					<bean
						class="org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor">
						<property name="corePoolSize" value="8" />
						<property name="maxPoolSize" value="12" />
					</bean>
				</property>
				<property name="step" ref="twCrdEppDataProcessStep" />
				<property name="gridSize" value="8" />
			</bean>
		</property>
	</bean>
	
	<bean id="twCrdEppPartitioner" class="com.citi.retail.optima.etl.batch.job.infra.FlatFileDataPartitioner" scope="step">
	<property name="directoryName" value="#{#getInputFilePath(jobParameters[COUNTRYPRODUCT])}" />
		<property name= "originalFile" value="#{#getInputFilePath(jobParameters[COUNTRYPRODUCT])}" />
		<property name="splitFile" value="#{#getInputFilePath(jobParameters[COUNTRYPRODUCT])}" />
		<property name="archvFile" value="#{#getArchiveFilePath(jobParameters[COUNTRYPRODUCT])}" />
		<property name="evalContext" ref="customEvaluationContext" />
		<property name="filePattern" value="#{jobParameters[EPP]}"/> 
		<property name="noOfRecordsPerSplit" value="100000"/>
		<property name="startTime" value="#{jobParameters[STRT_TIME]}"></property>  
		<property name="jobName" value="#{jobParameters[JOB_NAME]}"></property>
	</bean>

	<batch:step id="twCrdEppDataProcessStep">
		<batch:tasklet allow-start-if-complete="false">
			<batch:chunk reader="twCrdEppCsvReader" processor="twCrdEppAcqProcessor"
				writer="dataAcqWriter" commit-interval="1000" skip-limit="50000">
				<batch:skippable-exception-classes>
					<batch:include
						class="com.citi.retail.optima.etl.common.exception.OptimaRetailDataException" />
				</batch:skippable-exception-classes>
			</batch:chunk>
		</batch:tasklet>
	</batch:step>
	
	<bean id="twCrdEppCsvReader"
		class="org.springframework.batch.item.file.FlatFileItemReader"
		scope="step" lazy-init="true">
		<property name="linesToSkip" value="1"/>
		<property name="resource" value="#{stepExecutionContext[fileName]}"></property>
		<property name="lineMapper">
			<bean class="org.springframework.batch.item.file.mapping.DefaultLineMapper">
				<property name="lineTokenizer">
					<bean
						class="org.springframework.batch.item.file.transform.DelimitedLineTokenizer">
						
						<property name="delimiter" value="|"/>
						<property name="names" value="cardNumber,balance" />
						<!-- <property name="names" value="balance,cardNumber" /> -->
						
					</bean>
				</property>
				
				<property name="fieldSetMapper">
					<bean
						class="com.citi.retail.optima.etl.batch.job.mapper.EppFieldSetMapper">
						<property name="dateFormat" ref="format_ddMMMyyyy"/>
					</bean>
				</property>
				<!-- <property name="fieldSetMapper">
					<bean
						class="com.citi.retail.optima.etl.batch.job.mapper.SelectiveFieldSetMapper">
						<property name="prototypeBeanName" value="eppPrototype" />
						<property name="propertiesIncuded" value="balance,cardNumber"/>
					</bean>
				</property>  -->
			</bean>
		</property>
	</bean>
	
	<bean id="eppPrototype" class="com.citi.retail.optima.etl.common.model.EppRecord" scope="prototype"/>
	
	
	<bean id="twCrdEppAcqProcessor"
		class="com.citi.retail.optima.etl.batch.job.processor.da.TwSupportingDataProcessor"
		scope="step">
		<property name="dataService" ref="twDataService"/>
		<property name="preProcessMapName" value="twCrdEppDataProcessStep"/>
	</bean>
	
	<!-- *********************************************** EPP Step Configuration=END ***************************************************** -->
	
	<!-- *********************************************** Recovery Step Configuration=START ***************************************************** -->
	
	<bean name="twCrdRecvPrepropStep:master"
		class="org.springframework.batch.core.partition.support.PartitionStep">
		<property name="jobRepository" ref="jobRepository" />
		<property name="stepExecutionSplitter">
			<bean
				class="org.springframework.batch.core.partition.support.SimpleStepExecutionSplitter">
				<constructor-arg ref="jobRepository" />
				<constructor-arg ref="twCrdRecvDataProcessStep" />
				<constructor-arg ref="twCrdRecvPartitioner" />
			</bean>
		</property>
		<property name="partitionHandler">
			<bean
				class="org.springframework.batch.core.partition.support.TaskExecutorPartitionHandler"
				scope="step">
				<property name="taskExecutor">
					<bean
						class="org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor">
						<property name="corePoolSize" value="8" />
						<property name="maxPoolSize" value="12" />
					</bean>
				</property>
				<property name="step" ref="twCrdRecvDataProcessStep" />
				<property name="gridSize" value="8" />
			</bean>
		</property>
	</bean>
	
	<bean id="twCrdRecvPartitioner" class="com.citi.retail.optima.etl.batch.job.infra.FlatFileDataPartitioner" scope="step">
	<property name="directoryName" value="#{#getInputFilePath(jobParameters[COUNTRYPRODUCT])}" />
		<property name= "originalFile" value="#{#getInputFilePath(jobParameters[COUNTRYPRODUCT])}" />
		<property name="splitFile" value="#{#getInputFilePath(jobParameters[COUNTRYPRODUCT])}" />
		<property name="archvFile" value="#{#getArchiveFilePath(jobParameters[COUNTRYPRODUCT])}" />
		<property name="evalContext" ref="customEvaluationContext" />
		<property name="filePattern" value="#{jobParameters[REC]}"/> 
		<property name="noOfRecordsPerSplit" value="100000"/> 
		<property name="startTime" value="#{jobParameters[STRT_TIME]}"></property> 
		<property name="jobName" value="#{jobParameters[JOB_NAME]}"></property>
	</bean>
	
	<batch:step id="twCrdRecvDataProcessStep">
			<batch:tasklet allow-start-if-complete="false">
				<batch:chunk reader="twCrdRecvCsvReader" processor="twCrdRecvAcqProcessor"
					writer="dataAcqWriter" commit-interval="1000" skip-limit="50000">
					<batch:skippable-exception-classes>
						<batch:include
							class="com.citi.retail.optima.etl.common.exception.OptimaRetailDataException" />							
					</batch:skippable-exception-classes>
				</batch:chunk>
			</batch:tasklet>
			<batch:listeners>
			<batch:listener ref="twCrdRecvAcqProcessor" />
		</batch:listeners>
	</batch:step>
	
	<bean id="twCrdRecvCsvReader"
		class="org.springframework.batch.item.file.FlatFileItemReader"
		scope="step" lazy-init="true">
		<property name="linesToSkip" value="1"/>
		<property name="resource" value="#{stepExecutionContext[fileName]}"></property>
		<property name="lineMapper">
			<bean class="org.springframework.batch.item.file.mapping.DefaultLineMapper">
				<property name="lineTokenizer">
					<bean
						class="org.springframework.batch.item.file.transform.DelimitedLineTokenizer">
						
						<property name="delimiter" value="|"/>
						<property name="names" value="accNumber,newrc_p"/>
							<!-- value="newrc_p,cardNumber" /> -->
					</bean>
				</property>
				<property name="fieldSetMapper">
					<bean
						class="com.citi.retail.optima.etl.batch.job.mapper.RecvFieldSetMapper">
						<property name="dateFormat" ref="format_ddMMMyyyy"/>
					</bean>
				</property>
				<!-- <property name="fieldSetMapper">
					<bean
						class="com.citi.retail.optima.etl.batch.job.mapper.SelectiveFieldSetMapper">
						<property name="prototypeBeanName" value="recvPrototype" />
						<property name="propertiesIncuded" value="newrc_p,cardNumber"/>
					</bean>
				</property>  -->
			</bean>
		</property>
	</bean>
	
	<bean id="recvPrototype" class="com.citi.retail.optima.etl.common.model.RecvRecord" scope="prototype"/>
	
	<bean id="twCrdRecvAcqProcessor"
		class="com.citi.retail.optima.etl.batch.job.processor.da.TwRecoveryDataProcessor"
		scope="step">
		<property name="dataService" ref="twDataService"/>
		<property name="preProcessMapName" value="twCrdRecvDataProcessStep"/>
	</bean>
	
	
	<!-- *********************************************** Recovery Step Configuration=END ***************************************************** -->
	
	<!-- *********************************************** Rainbow Step Configuration=START ***************************************************** -->
	<bean name="twCrdRainbowproccrStep:master"
		class="org.springframework.batch.core.partition.support.PartitionStep">
		<property name="jobRepository" ref="jobRepository" />
		<property name="stepExecutionSplitter">
			<bean
				class="org.springframework.batch.core.partition.support.SimpleStepExecutionSplitter">
				<constructor-arg ref="jobRepository" />
				<constructor-arg ref="rainbowDataProcessStep" />
				<constructor-arg ref="rainbowPartitioner" />
			</bean>
		</property>
		<property name="partitionHandler">
			<bean
				class="org.springframework.batch.core.partition.support.TaskExecutorPartitionHandler"
				scope="step">
				<property name="taskExecutor">
					<bean
						class="org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor">
						<property name="corePoolSize" value="8" />
						<property name="maxPoolSize" value="12" />
					</bean>
				</property>
				<property name="step" ref="rainbowDataProcessStep" />
				<property name="gridSize" value="8" />
			</bean>
		</property>
	</bean>
	
	<bean id="rainbowPartitioner" class="com.citi.retail.optima.etl.batch.job.infra.FlatFileDataPartitioner" scope="step">
		
	<property name="directoryName" value="#{#getInputFilePath(jobParameters[COUNTRYPRODUCT])}" />
		<property name= "originalFile" value="#{#getInputFilePath(jobParameters[COUNTRYPRODUCT])}" />
		<property name="splitFile" value="#{#getInputFilePath(jobParameters[COUNTRYPRODUCT])}" />
		<property name="archvFile" value="#{#getArchiveFilePath(jobParameters[COUNTRYPRODUCT])}" />
		<property name="evalContext" ref="customEvaluationContext" />
		<property name="filePattern" value="#{jobParameters[RNBW]}"/> 
		<property name="noOfRecordsPerSplit" value="100000"/> 
		<property name="startTime" value="#{jobParameters[STRT_TIME]}"></property> 
		<property name="jobName" value="#{jobParameters[JOB_NAME]}"></property>
	</bean>
	
	<batch:step id="rainbowDataProcessStep">
			<batch:tasklet allow-start-if-complete="false">
				<batch:chunk reader="twCrdRainbowCsvReader" processor = "twCrdRainbowDataProcessor"
					writer="twCrdCsvFileItemWriter" commit-interval="10000" skip-limit="50000">
					<batch:skippable-exception-classes>
						<batch:include
							class="com.citi.retail.optima.etl.common.exception.OptimaRetailDataException" />			
					</batch:skippable-exception-classes>
				</batch:chunk>
			</batch:tasklet>
			
			<batch:listeners>
				<batch:listener ref="twCrdRainbowEnrichmentProcessor" />
				<batch:listener ref="twCrdRainbowAggregationProcessor" />
				<batch:listener ref="twCrdCsvFileItemWriter" />
				<batch:listener ref="commonBalanceWriter" />
				<batch:listener ref="arrangementRateWriter" />
			</batch:listeners>
	</batch:step>
	
	<bean id="twCrdRainbowCsvReader"
		class="com.citi.retail.optima.etl.batch.job.reader.CustomItemReader"
		scope="step" lazy-init="true">
<!-- 		<property name="linesToSkip" value="1"/> -->
		<property name="strict" value="true"></property>
		<property name="resource" value="#{stepExecutionContext[fileName]}"></property>
		<property name= "fileName" value="#{stepExecutionContext[fileName]}"></property>
		<property name="lineMapper">
			<bean class="org.springframework.batch.item.file.mapping.DefaultLineMapper">
				<property name="lineTokenizer">
					<bean
						class="org.springframework.batch.item.file.transform.DelimitedLineTokenizer">
						
						<property name="delimiter" value="|"/>
						<property name="names" value ="CRD_NBR,crdBlkCode,crdBlkRsn,crdBlkCodeDate,crdAcctNumber,CRD_ISSUE_DT,nasSrcCde,agntCde,crdType,EMV_IND,crdCncldDate,PLSTIC_ID_CDE,acctPrimBlkCode,acctIntrnlStatCode,chrgOffLcyAmt,monbLnc,CREATION_DT,clt2,nbrOfSupCrds,payAmt2,lrtlAmt2,ortlAmt2,lcshAmt2,ocshAmt2,lrtlCnt2,ortlCnt2,lcshCnt2,ocshCnt2,anr2,acctRiskLvl,ovrlmt_exclsn_ind,epp_amnt,nbalamt2,alopAmnt,alopCrLimit,LST_ACTY_DT,directDrIndicator,mue,crlmRelmLcyAmt,LOSS_MTGTN_CNT,cshBlnc2,usercde3,enrLcyAmt,currDueAmt,past_30_amt,delqStr,PYMT_HSTRY_STR,currblnc,lcycblnc,payamt1,clt1,behScore,bScoreid,block1,status1,acct_blk_rsn_1_cyc,acct_blk_rsn_2_cyc,dwcpm_total_amt_due,pastDueAmt,acct_ind,cycle,acct_prim_blk_rsn_cde,acctPrimBlkDate,clntNbr,acctOpenDate,ACCT_ACTIVATION_DT,cclIndicator,RELN_NBR,datePay,lateFee,anfee,cshFee,otherfee,riRate,ciRate,cashIBnp,cashSvcBnp,rtlMemberBnp,rtlIBnp,rtlInsurBnp,rtlMiscBnp,rtlSvcBnp,delqProf,CLNT_BIRTH_DT,idno,gender,CLNT_RESD_STAT_CDE,income,CLNT_ECS_OCCPN_CDE,CLNT_WORK_INDUSTRY_CDE,tte,education,open_acct,open_cif,tot_acct,CTL_flag,rtlIntr,btintr,cshIntr,reanr,gcbcPortfolioId,alignScore"/> 
						
						<!-- value="crdBlkCode,crdBlkRsn,crdBlkCodeDate,CRD_ISSUE_DT,nasSrcCde,agntCde,crdType,EMV_IND,crdCncldDate,PLSTIC_ID_CDE,acctPrimBlkCode,acctIntrnlStatCode,chrgOffLcyAmt,monbLnc,CREATION_DT,clt2,nbrOfSupCrds,payAmt2,lrtlAmt2,ortlAmt2,lcshAmt2,ocshAmt2,lrtlCnt2,ortlCnt2,lcshCnt2,ocshCnt2,anr2,acctRiskLvl,ovrlmt_exclsn_ind,epp_amnt,nbalamt2,alopAmnt,alopCrLimit,LST_ACTY_DT,directDrIndicator,mue,crlmRelmLcyAmt,LOSS_MTGTN_CNT,cshBlnc2,usercde3,enrLcyAmt,currDueAmt,past_30_amt,delqStr,PYMT_HSTRY_STR,currblnc,lcycblnc,payamt1,clt1,behScore,bScoreid,block1,status1,acct_blk_rsn_1_cyc,acct_blk_rsn_2_cyc,dwcpm_total_amt_due,pastDueAmt,acct_ind,cycle,acct_prim_blk_rsn_cde,acctPrimBlkDate,clntNbr,acctOpenDate,ACCT_ACTIVATION_DT,cclIndicator,datePay,lateFee,anfee,cshFee,otherfee,riRate,ciRate,cashIBnp,cashSvcBnp,rtlMemberBnp,rtlIBnp,rtlInsurBnp,rtlMiscBnp,rtlSvcBnp,delqProf,CLNT_BIRTH_DT,idno,gender,CLNT_RESD_STAT_CDE,income,CLNT_ECS_OCCPN_CDE,CLNT_WORK_INDUSTRY_CDE,tte,education,open_acct,open_cif,tot_acct,CTL_flag,rtlIntr,btintr,cshIntr,reanr,CRD_NBR,crdAcctNumber,RELN_NBR" /> -->
<!-- 							value="crdBlkCode,crdBlkRsn,crdBlkCodeDate,CRD_ISSUE_DT,nasSrcCde,agntCde,crdType,EMV_IND,crdCncldDate,PLSTIC_ID_CDE,acctPrimBlkCode,acctIntrnlStatCode,chrgOffLcyAmt,monbLnc,CREATION_DT,clt2,nbrOfSupCrds,payAmt2,lrtlAmt2,ortlAmt2,lcshAmt2,ocshAmt2,lrtlCnt2,ortlCnt2,lcshCnt2,ocshCnt2,anr2,acctRiskLvl,ovrlmt_exclsn_ind,epp_amnt,nbalamt2,alopAmnt,alopCrLimit,LST_ACTY_DT,directDrIndicator,mue,crlmRelmLcyAmt,LOSS_MTGTN_CNT,cshBlnc2,usercde3,enrLcyAmt,currDueAmt,past_30_amt,delqStr,PYMT_HSTRY_STR,currblnc,lcycblnc,payamt1,clt1,behScore,bScoreid,block1,status1,acct_blk_rsn_1_cyc,acct_blk_rsn_2_cyc,dwcpm_total_amt_due,pastDueAmt,acct_ind,cycle,acct_prim_blk_rsn_cde,acctPrimBlkDate,clntNbr,acctOpenDate,ACCT_ACTIVATION_DT,cclIndicator,datePay,lateFee,anfee,cshFee,otherfee,riRate,ciRate,cashIBnp,cashSvcBnp,rtlMemberBnp,rtlIBnp,rtlInsurBnp,rtlMiscBnp,rtlSvcBnp,delqProf,CLNT_BIRTH_DT,idno,gender,CLNT_RESD_STAT_CDE,income,CLNT_ECS_OCCPN_CDE,CLNT_WORK_INDUSTRY_CDE,tte,education,open_acct,open_cif,tot_acct,CTL_flag,rtlIntr,btintr,cshIntr,reanr,CRD_NBR,crdAcctNumber,RELN_NBR,gcbcportfolioid,finfico" /> -->
						
					</bean>
				</property>
				<property name="fieldSetMapper">
					<bean
						class="com.citi.retail.optima.etl.batch.job.mapper.RainbowFieldSetMapper">
						<property name="dateFormat" ref="format_ddMMMyyyy"/>
					</bean>
				<!--</property>
					 <bean
						class="com.citi.retail.optima.etl.batch.job.mapper.SelectiveFieldSetMapper">
						<property name="prototypeBeanName" value="rainbowRecord" />
						<property name="propertiesIncuded" value="nasSrcCde,agntCde,crdBlkCode,crdBlkRsn,crdType,acctPrimBlkCode,acctIntrnlStatCode,chrgOffLcyAmt,monbLnc,clt2,nbrOfSupCrds,payAmt2,lrtlAmt2,ortlAmt2,lcshAmt2,ocshAmt2,lrtlCnt2,ortlCnt2,lcshCnt2,ocshCnt2,anr2,acctRiskLvl,alopAmnt,alopCrLimit,directDrIndicator,crlmRelmLcyAmt,cshBlnc2,enrLcyAmt,currDueAmt,delqStr,behScore,bScoreid,block1,pastDueAmt,cycle,clntNbr,cclIndicator,lateFee,cshFee,riRate,ciRate,cashIBnp,cashSvcBnp,rtlMemberBnp,rtlIBnp,rtlInsurBnp,rtlMiscBnp,rtlSvcBnp,delqProf,rtlIntr,cshIntr,crdAcctNumber"/>
						<property name="customEditors">
                        	<map>
                            	<entry key="java.util.Date">
                                	<ref local="dateEditor" />
                                </entry>
                           </map>
                        </property>
					</bean>--> 
				</property>
			</bean>
		</property>
	</bean>
	
	<bean id="twCrdRainbowDataProcessor"
		class="org.springframework.batch.item.support.CompositeItemProcessor"
		scope="step">
		<property name="delegates">
			<util:list>
				<ref bean="twCrdRainbowEnrichmentProcessor" />
				<ref bean="twCrdRainbowAggregationProcessor" />
			</util:list>
		</property>
	</bean>
	
	<bean id="twCrdRainbowEnrichmentProcessor"
		class="com.citi.retail.optima.etl.batch.job.processor.EnrichmentProcessor"
		scope="step" p:enrichmentServiceBean-ref="twCrdRainbowEnrichmentService"
		p:timeTracker-ref="timeTracker">
		<property name="batchInstanceId" value="#{jobParameters[batchInstanceId]}" />
		<property name="jobName" value="#{jobParameters[JOB_NAME]}"/>
		<property name="fileName" value="#{stepExecutionContext[fileName]}"></property>
		<property name="auditFileId" value="#{jobParameters[AUDITFILEID]}"/>
		<property name="auditFiles" value="#{jobParameters[AUDITFILES]}"/>
		<property name="jobMessageDao" ref="jobMessageDao"/>	
		<property name="eTLQueryExecutor" ref="queryExecutor" />	
		<property name="ctlFileDt" value="#{jobParameters[CTLFILECREATIONDT]}"/>
		<property name="jobConfigDao" ref="jobConfigDao" />
	</bean>
	
	<bean	id="twCrdRainbowEnrichmentService"
			class="com.citi.retail.optima.etl.enrichment.impl.EnrichmentServiceImpl"
			p:evalContext-ref="customEvaluationContext"
			p:enrichmentRules-ref="enrichmentRulesHolder"
			p:keyList="#{#getConcatenatedKeys(jobParameters[sys_proc_id], 'rainbowDataProcStep', null)}"
			scope="step"
	/>
	
	<bean name="twCrdRainbowAggregationProcessor"
		class="com.citi.retail.optima.etl.batch.job.processor.AggregationProcessor"
		init-method="init" scope="step">
		<property name="aggregationServiceFactory" ref="aggregationServiceFactory" />
		<property name="batchInstanceId" value="#{jobParameters[batchInstanceId]}" />
		<property name="monthEndDate" value="#{jobParameters[reportDate]}" />
		<property name="keyList"
			value="#{#getConcatenatedKeys(jobParameters[sys_proc_id], 'rainbowDataProcessStep',null)}" />
		<property name="stepName" value="rainbowDataProcessStep" />
		<property name="accountTraceabilityRequired" value="false" />
		<property name="timeTracker" ref="timeTracker" />
		<property name="sysProcId" value="#{jobParameters[sys_proc_id]}" />
	</bean>
	
	<bean id="twCrdCsvFileItemWriter" class="com.citi.retail.optima.etl.batch.job.writer.ConditionalCompositeItemWriter" scope="step">
		<property name="excludeItemDelegate" ref="excludeRecFileWriter"/>
		<property name="delegates">
			<util:list>
				<ref bean="indicativeFileWriter"/>
				<ref bean="arrangementIpWriter"/>
				<ref bean="commonBalanceWriter"/>
				<ref bean="arrangementIpRatingWriter"/>
				<ref bean="arrangementRateWriter"/>
			</util:list>
		</property>
	</bean>
	
	<!-- *********************************************** Rainbow Step Configuration=END ***************************************************** -->
	
	<!-- *********************************************** Rainbow Aggregation Step Configuration=START ***************************************************** -->
	
	<bean name="twCrdRainbowproccrAggregationResultsTasklet" class="com.citi.retail.optima.etl.batch.tasklet.FooterSummaryAggregationResultTasklet"
		scope="step">
		<property name="aggregationServiceFactory" ref="aggregationServiceFactory" />
		<property name="batchInstanceId" value="#{jobParameters[batchInstanceId]}" />
		<property name="stepName" value="rainbowDataProcessStep" />
		<property name="sysProcId" value="#{jobParameters[sys_proc_id]}" />
		<property name="footerAggrRuleId" value="100" />
		<property name="footerItemList" ref="twCrdFooterItemList" />
		<property name="aggrFooterWriter" ref="aggrFooterWriter"/>
		<property name="jobConfigDao" ref="jobConfigDao" />
	</bean>

	<!-- *********************************************** Rainbow Aggregation Step Configuration=END ***************************************************** -->
	<!-- *********************************************** Pre Rainbow Step Configuration=START ***************************************************** -->
	<bean name="twCrdPreRainbowproccrStep:master"
		class="org.springframework.batch.core.partition.support.PartitionStep">
		<property name="jobRepository" ref="jobRepository" />
		<property name="stepExecutionSplitter">
			<bean
				class="org.springframework.batch.core.partition.support.SimpleStepExecutionSplitter">
				<constructor-arg ref="jobRepository" />
				<constructor-arg ref="preRainbowDataProcessStep" />
				<constructor-arg ref="preRainbowPartitioner" />
			</bean>
		</property>
		<property name="partitionHandler">
			<bean
				class="org.springframework.batch.core.partition.support.TaskExecutorPartitionHandler"
				scope="step">
				<property name="taskExecutor">
					<bean
						class="org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor">
						<property name="corePoolSize" value="8" />
						<property name="maxPoolSize" value="12" />
					</bean>
				</property>
				<property name="step" ref="preRainbowDataProcessStep" />
				<property name="gridSize" value="8" />
			</bean>
		</property>
	</bean>
	
	<bean id="preRainbowPartitioner" class="com.citi.retail.optima.etl.batch.job.infra.FlatFileDataPartitioner" scope="step">
		
		<property name="directoryName" value="#{#getInputFilePath(jobParameters[COUNTRYPRODUCT])}" />
		<property name= "originalFile" value="#{#getInputFilePath(jobParameters[COUNTRYPRODUCT])}" />
		<property name="splitFile" value="#{#getInputFilePath(jobParameters[COUNTRYPRODUCT])}" />
		<property name="archvFile" value="#{#getArchiveFilePath(jobParameters[COUNTRYPRODUCT])}" />
		<property name="evalContext" ref="customEvaluationContext" />
		<property name="filePattern" value="#{jobParameters[RNBW]}"/> 
		<property name="noOfRecordsPerSplit" value="100000"/> 
		<property name="startTime" value="#{jobParameters[STRT_TIME]}"></property> 
		<property name="jobName" value="#{jobParameters[JOB_NAME]}"></property>
	</bean>
	
	<batch:step id="preRainbowDataProcessStep">
			<batch:tasklet allow-start-if-complete="false">
				<batch:chunk reader="twCrdPreRainbowCsvReader" processor = "twCrdPreRainbowDataProcessor"
					writer="twCrdCsvFileItemWriter" commit-interval="10000" skip-limit="50000">
					<batch:skippable-exception-classes>
						<batch:include
							class="com.citi.retail.optima.etl.common.exception.OptimaRetailDataException" />							
					</batch:skippable-exception-classes>
				</batch:chunk>
			</batch:tasklet>
			
			<batch:listeners>
				<batch:listener ref="twCrdPreRainbowEnrichmentProcessor" />
				<batch:listener ref="twCrdPreRainbowAggregationProcessor" />
				<batch:listener ref="twCrdCsvFileItemWriter" />
				<batch:listener ref="commonBalanceWriter" />
				<batch:listener ref="arrangementRateWriter" />
			</batch:listeners>
	</batch:step>
	
	<bean id="twCrdPreRainbowCsvReader"
		class="com.citi.retail.optima.etl.batch.job.reader.CustomItemReader"
		scope="step" lazy-init="true">
<!-- 		<property name="linesToSkip" value="1"/> -->
		<property name="strict" value="true"></property>
		<property name="resource" value="#{stepExecutionContext[fileName]}"></property>
		<property name= "fileName" value="#{stepExecutionContext[fileName]}"></property>
		<property name="lineMapper">
			<bean class="org.springframework.batch.item.file.mapping.DefaultLineMapper">
				<property name="lineTokenizer">
					<bean
						class="org.springframework.batch.item.file.transform.DelimitedLineTokenizer">
						
						<property name="delimiter" value="|"/>
						<property name="names"
								value ="cardType,cardNmbr,DATEBRTH,dateOpen,dateCncl,DATECLT1,CLT1,DATLCLT1,LCLT1,dateExp1,cycle,GENDER,MARRIAGE,EDUCTION,HOMEZIP,OCCUPATN,INCOME,HSOWNER,AGENCODE,CLSCOD1,STATUS1,POT,POTEXP,CURRBLNC,ANR1,PAYAMT1,datePay,delqProf,intrst,COFFAMT,DATEBLK1,SUPPCARD,CSHBLNC1,RTLBLNC1,BLOCK1,ALTBLK1,PHOTO,SOURCE,custId,HOMETIME,WORKZIP,PROFESSN,clt2,dateClt2,lclt2,datLclt2,anr2,RTLBLNC2,CSHBLNC2,lcshCnt2,LCSHCNT1,lrtlCnt2,LRTLCNT1,lcshAmt2,LCSHAMT1,lrtlAmt2,LRTLAMT1,ocshCnt2,OCSHCNT1,ortlCnt2,ORTLCNT1,OCSHAMT2,ocsha,ortlAmt2,ORTLAMT1,payAmt2,anfee,lateFee,cshFee,OTHERFEE,behScore,bScoreid,SCORE,SCOREID,riskLevl,woPrn,woIntr,WO_OTHER,REC_PRN,REC_INTR,REC_OTH,block2,dateBlk2,ALTBLK2,CLSCOD2,LCLSCOD2,LCLSCOD1,status2,dateSt2,DATEST1,usercde1,usercde2,usercde3,DEVNCODE,TEMPCLT,TEMPIND,achind,FEECODE,DATEEXP2,DATEFEE,dateRtl,datecsh,dateTmpf,dateTmpt,availclt,IDNO,REVIND,ACCTIND,LCYCBLNC,LMONBLNC,LBEHSCOR,LBSCORID,BS6M,BSID6M,BS12M,BSID12M,monbLnc,dcnt1,DCNT2,DCNT3,DCNT4,DCNT5,DCNT6,DCNT7,DCNT8,creatdte,xfer_eff,pinregen,inc_ind,eb_oinc,oinc_ind,cre_scor,rev_scor,score_id,tte,mue,avaline,member_since_date,address_chg_dte,ciRate,riRate,cashAccrIntr,rtlAccrIntr,cshIntr,rtlIntr,BAR,dueDateGrp,rageReq1,reageDate1,REAGEREQ2,REAGEDATE2,ALOP_AMNT,EPP_AMNT,alopCrLimit,ALOP_OLD_CRLIMIT,ALOP_TOTLIMIT,ALOP_SP_LMT_PER,EMV_TAG,EMV_CARD_USE_IND,CURR_LSCODE,CURR_LSCODE_EFF_DTE,PEND_LSCODE,PREV_LSCODE,JCIC_ICNO,JCIC_SI,Fin_chrg,mdue,totAmtDue,z_type,CNR,CBR,gcbcPortfolioId,alignScore"/>
							<!-- value="cardType,DATEBRTH,dateOpen,dateCncl,DATECLT1,CLT1,DATLCLT1,LCLT1,dateExp1,cycle,GENDER,MARRIAGE,EDUCTION,HOMEZIP,OCCUPATN,INCOME,HSOWNER,AGENCODE,CLSCOD1,STATUS1,POT,POTEXP,CURRBLNC,ANR1,PAYAMT1,datePay,delqProf,intrst,COFFAMT,DATEBLK1,SUPPCARD,CSHBLNC1,RTLBLNC1,BLOCK1,ALTBLK1,PHOTO,SOURCE,custId,HOMETIME,WORKZIP,PROFESSN,clt2,dateClt2,lclt2,datLclt2,anr2,RTLBLNC2,CSHBLNC2,lcshCnt2,LCSHCNT1,lrtlCnt2,LRTLCNT1,lcshAmt2,LCSHAMT1,lrtlAmt2,LRTLAMT1,ocshCnt2,OCSHCNT1,ortlCnt2,ORTLCNT1,OCSHAMT2,ocsha,ortlAmt2,ORTLAMT1,payAmt2,anfee,lateFee,cshFee,OTHERFEE,behScore,bScoreid,SCORE,SCOREID,riskLevl,woPrn,woIntr,WO_OTHER,REC_PRN,REC_INTR,REC_OTH,block2,dateBlk2,ALTBLK2,CLSCOD2,LCLSCOD2,LCLSCOD1,status2,dateSt2,DATEST1,usercde1,usercde2,usercde3,DEVNCODE,TEMPCLT,TEMPIND,achind,FEECODE,DATEEXP2,DATEFEE,dateRtl,datecsh,dateTmpf,dateTmpt,availclt,IDNO,REVIND,ACCTIND,LCYCBLNC,LMONBLNC,LBEHSCOR,LBSCORID,BS6M,BSID6M,BS12M,BSID12M,monbLnc,dcnt1,DCNT2,DCNT3,DCNT4,DCNT5,DCNT6,DCNT7,DCNT8,creatdte,xfer_eff,pinregen,inc_ind,eb_oinc,oinc_ind,cre_scor,rev_scor,score_id,tte,mue,avaline,member_since_date,address_chg_dte,ciRate,riRate,cashAccrIntr,rtlAccrIntr,cshIntr,rtlIntr,BAR,dueDateGrp,rageReq1,reageDate1,REAGEREQ2,REAGEDATE2,ALOP_AMNT,EPP_AMNT,alopCrLimit,ALOP_OLD_CRLIMIT,ALOP_TOTLIMIT,ALOP_SP_LMT_PER,EMV_TAG,EMV_CARD_USE_IND,CURR_LSCODE,CURR_LSCODE_EFF_DTE,PEND_LSCODE,PREV_LSCODE,JCIC_ICNO,JCIC_SI,Fin_chrg,mdue,totAmtDue,z_type,CNR,CBR,cardNmbr" /> -->
<!-- 							value="cardType,DATEBRTH,dateOpen,dateCncl,DATECLT1,CLT1,DATLCLT1,LCLT1,dateExp1,cycle,GENDER,MARRIAGE,EDUCTION,HOMEZIP,OCCUPATN,INCOME,HSOWNER,AGENCODE,CLSCOD1,STATUS1,POT,POTEXP,CURRBLNC,ANR1,PAYAMT1,datePay,delqProf,intrst,COFFAMT,DATEBLK1,SUPPCARD,CSHBLNC1,RTLBLNC1,BLOCK1,ALTBLK1,PHOTO,SOURCE,custId,HOMETIME,WORKZIP,PROFESSN,clt2,dateClt2,lclt2,datLclt2,anr2,RTLBLNC2,CSHBLNC2,lcshCnt2,LCSHCNT1,lrtlCnt2,LRTLCNT1,lcshAmt2,LCSHAMT1,lrtlAmt2,LRTLAMT1,ocshCnt2,OCSHCNT1,ortlCnt2,ORTLCNT1,OCSHAMT2,ocsha,ortlAmt2,ORTLAMT1,payAmt2,anfee,lateFee,cshFee,OTHERFEE,behScore,bScoreid,SCORE,SCOREID,riskLevl,woPrn,woIntr,WO_OTHER,REC_PRN,REC_INTR,REC_OTH,block2,dateBlk2,ALTBLK2,CLSCOD2,LCLSCOD2,LCLSCOD1,status2,dateSt2,DATEST1,usercde1,usercde2,usercde3,DEVNCODE,TEMPCLT,TEMPIND,achind,FEECODE,DATEEXP2,DATEFEE,dateRtl,datecsh,dateTmpf,dateTmpt,availclt,IDNO,REVIND,ACCTIND,LCYCBLNC,LMONBLNC,LBEHSCOR,LBSCORID,BS6M,BSID6M,BS12M,BSID12M,monbLnc,dcnt1,DCNT2,DCNT3,DCNT4,DCNT5,DCNT6,DCNT7,DCNT8,creatdte,xfer_eff,pinregen,inc_ind,eb_oinc,oinc_ind,cre_scor,rev_scor,score_id,tte,mue,avaline,member_since_date,address_chg_dte,ciRate,riRate,cashAccrIntr,rtlAccrIntr,cshIntr,rtlIntr,BAR,dueDateGrp,rageReq1,reageDate1,REAGEREQ2,REAGEDATE2,ALOP_AMNT,EPP_AMNT,alopCrLimit,ALOP_OLD_CRLIMIT,ALOP_TOTLIMIT,ALOP_SP_LMT_PER,EMV_TAG,EMV_CARD_USE_IND,CURR_LSCODE,CURR_LSCODE_EFF_DTE,PEND_LSCODE,PREV_LSCODE,JCIC_ICNO,JCIC_SI,Fin_chrg,mdue,totAmtDue,z_type,CNR,CBR,cardNmbr,gcbcportfolioid,finfico" /> -->
					</bean>
				</property>
				<property name="fieldSetMapper">
						<bean class="com.citi.retail.optima.etl.batch.job.mapper.PreRainbowFieldSetMapper">
							<property name="dateFormat" ref="dateFormat_yyyy-MM-dd"/>
						</bean>
					<!-- <bean
						class="com.citi.retail.optima.etl.batch.job.mapper.SelectiveFieldSetMapper">
						<property name="prototypeBeanName" value="preRainbowRecord" />
						<property name="propertiesIncuded" value="achind,alopCrLimit,anfee,anr2,availclt,behScore,block2,bScoreid,cardNmbr,cardType,cashAccrIntr,ciRate,clt2,cshFee,cshIntr,custId,cycle,dateBlk2,dateClt2,dateCncl,datecsh,dateExp1,dateOpen,datePay,dateRtl,dateSt2,dateTmpf,dateTmpt,datLclt2,dcnt1,delqProf,dueDateGrp,intrst,lateFee,lclt2,lcshAmt2,lcshCnt2,lrtlAmt2,lrtlCnt2,mdue,monbLnc,ocsha,ocshCnt2,ortlAmt2,ortlCnt2,payAmt2,reageDate1,rageReq1,riRate,riskLevl,rtlAccrIntr,rtlIntr,status2,totAmtDue,woIntr,woPrn"/>
						<property name="customEditors">
                        	<map>
                            	<entry key="java.util.Date">
                                	<ref local="dateEditor2" />
                                </entry>
                           </map>
                        </property>
					</bean> -->
				</property>
			</bean>
		</property>
	</bean>
	
	<bean id="twCrdPreRainbowDataProcessor"
		class="org.springframework.batch.item.support.CompositeItemProcessor"
		scope="step">
		<property name="delegates">
			<util:list>
				<ref bean="twCrdPreRainbowEnrichmentProcessor" />
				<ref bean="twCrdPreRainbowAggregationProcessor" />
			</util:list>
		</property>
	</bean>
	
	<bean id="twCrdPreRainbowEnrichmentProcessor"
		class="com.citi.retail.optima.etl.batch.job.processor.EnrichmentProcessor"
		scope="step" p:enrichmentServiceBean-ref="twCrdPreRainbowEnrichmentService"
		p:timeTracker-ref="timeTracker">
		<property name="batchInstanceId" value="#{jobParameters[batchInstanceId]}" />
		<property name="jobName" value="#{jobParameters[JOB_NAME]}"/>
		<property name="fileName" value="#{stepExecutionContext[fileName]}"></property>
		
		<property name="auditFileId" value="#{jobParameters[AUDITFILEID]}"/>
		<property name="auditFiles" value="#{jobParameters[AUDITFILES]}"/>
		<property name="jobMessageDao" ref="jobMessageDao"/>	
		<property name="eTLQueryExecutor" ref="queryExecutor" />	
		<property name="ctlFileDt" value="#{jobParameters[CTLFILECREATIONDT]}"/>
		<property name="jobConfigDao" ref="jobConfigDao" />
	</bean>
	
	<bean id="twCrdPreRainbowEnrichmentService"
		class="com.citi.retail.optima.etl.enrichment.impl.EnrichmentServiceImpl"
		p:evalContext-ref="customEvaluationContext"
		p:enrichmentRules-ref="enrichmentRulesHolder"
		p:keyList="#{#getConcatenatedKeys(jobParameters[sys_proc_id], 'preRainbowDataProcStep', null)}"
		scope="step"
	/>
	
	<bean name="twCrdPreRainbowAggregationProcessor"
		class="com.citi.retail.optima.etl.batch.job.processor.AggregationProcessor"
		init-method="init" scope="step">
		<property name="aggregationServiceFactory" ref="aggregationServiceFactory" />
		<property name="batchInstanceId" value="#{jobParameters[batchInstanceId]}" />
		<property name="monthEndDate" value="#{jobParameters[reportDate]}" />
		<property name="keyList"
			value="#{#getConcatenatedKeys(jobParameters[sys_proc_id], 'preRainbowDataProcessStep',null)}" />
		<property name="stepName" value="preRainbowDataProcessStep" />
		<property name="accountTraceabilityRequired" value="false" />
		<property name="timeTracker" ref="timeTracker" />
		<property name="sysProcId" value="#{jobParameters[sys_proc_id]}" />
	</bean>
	
	
	<bean id="preRainbowRecord" class="com.citi.retail.optima.etl.common.model.PreRainbowRecord" scope="prototype"/>
	
	
	<!-- *********************************************** Pre Rainbow Step Configuration=END ***************************************************** -->
	<!-- *********************************************** Rainbow Aggregation Step Configuration=START ***************************************************** -->
	
	<bean name="twCrdPreRainbowproccrAggregationResultsTasklet" class="com.citi.retail.optima.etl.batch.tasklet.FooterSummaryAggregationResultTasklet"
		scope="step">
		<property name="aggregationServiceFactory" ref="aggregationServiceFactory" />
		<property name="batchInstanceId" value="#{jobParameters[batchInstanceId]}" />
		<property name="stepName" value="preRainbowDataProcessStep" />
		<property name="sysProcId" value="#{jobParameters[sys_proc_id]}" />
		<property name="footerAggrRuleId" value="100" />
		<property name="footerItemList" ref="twCrdFooterItemList" />
		<property name="aggrFooterWriter" ref="aggrFooterWriter"/>
		<property name="jobConfigDao" ref="jobConfigDao" />
	</bean>

	<!-- *********************************************** Rainbow Aggregation Step Configuration=END ***************************************************** -->
	
	<!-- *********************************************** Preprocessor tasklet Start *****************************************************-->
      <bean name="registerPreprocessLoader"
		class="com.citi.retail.optima.etl.batch.tasklet.PreprocessRegister"
		scope="step" init-method="init">
		<property name="preprocessDataService" ref="preprocessDataServiceFact" />
		<property name="providerList">
			<util:list>
				<ref bean="preprocessFicoDataProvider" />
				<ref bean="preprocessTdrDataProvider" />
				<ref bean="preprocessNtbDataProvider" />
				<ref bean="preprocessEppDataProvider" />
				<ref bean="preprocessWoDataProvider" />
				<ref bean="preprocessRecvDataProvider" />
				<ref bean="preprocessTwCrdBoocDataProvider" />
			</util:list>
		</property>
		<property name="keyList">
			<util:list>
				<value>twCrdRecvDataProcessStep</value>
				<value>twCrdWoDataProcessStep</value>
				<value>twCrdEppDataProcessStep</value>
				<value>twCrdNtbDataProcessStep</value>
				<value>twCrdTdrDataProcessStep</value>
				<value>twCrdFicoDataProcessStep</value>
				<value>twCrdBoocDataProcessStep</value>
			</util:list>
		</property>
	</bean>
	<!-- *********************************************** Preprocessor tasklet End *****************************************************-->
	
	<!-- *****************************************************CB FINANCE ATTRIBUTE CHANGES ************************************************ -->
	
	<batch:step id="cbFinanceDataProcessStep">
			<batch:tasklet allow-start-if-complete="false">
				<batch:chunk reader="cbFinanceCsvReader" processor="cbFinanceAcqProcessor"
					writer="dataAcqWriter" commit-interval="1000" skip-limit="50000">
					<batch:skippable-exception-classes>
						<batch:include
							class="com.citi.retail.optima.etl.common.exception.OptimaRetailDataException" />
					</batch:skippable-exception-classes>
				</batch:chunk>
			</batch:tasklet>
	</batch:step>
	
	<bean id="cbFinanceCsvReader"
		class="org.springframework.batch.item.file.FlatFileItemReader"
		scope="step" lazy-init="true">
		<property name="linesToSkip" value="1"/>
		<!-- <property name="resource" value="#{stepExecutionContext[fileName]}"></property> -->
		<property name="resource" value="file:#{#getInputFilePath(jobParameters[COUNTRYPRODUCT])}#{jobParameters[CB_FINANCE]}"></property>
		
		<property name="lineMapper">
			<bean class="org.springframework.batch.item.file.mapping.DefaultLineMapper">
				<property name="lineTokenizer">
					<bean
						class="org.springframework.batch.item.file.transform.DelimitedLineTokenizer">
						
						<property name="delimiter" value="|"/>
						<property name="names"
							value="country,portfolioid,portfolioiddesc,prlvlvid,mansegid,goc,frsbu,frsou" />
					</bean>
				</property>
				<property name="fieldSetMapper">
					<bean
						class="com.citi.retail.optima.etl.batch.job.mapper.CbFinanceFieldSetMapper">
<!-- 						<property name="dateFormat" ref="format_ddMMMyyyy"/> -->
					</bean>
				</property>
			</bean>
		</property>
	</bean>
	
	<bean id="cbFinanceAcqProcessor"
		class="com.citi.retail.optima.etl.batch.job.processor.da.CbFinanceSupportingDataProcessor"
		scope="step">
		<property name="dataService" ref="twDataService"/>
		<property name="preProcessMapName" value="cbFinanceDataProcessStep"/>
	</bean>
	
	<bean name="twCrdBoocPrepropStep:master" class="org.springframework.batch.core.partition.support.PartitionStep">
		<property name="jobRepository" ref="jobRepository" />
		<property name="stepExecutionSplitter">
			<bean class="org.springframework.batch.core.partition.support.SimpleStepExecutionSplitter">
				<constructor-arg ref="jobRepository" />
				<constructor-arg ref="twCrdBoocDataProcessStep" />
				<constructor-arg ref="twCrdBoocPartitioner" />
			</bean>
		</property>
		<property name="partitionHandler">
			<bean class="org.springframework.batch.core.partition.support.TaskExecutorPartitionHandler" scope="step">
				<property name="taskExecutor">
					<bean class="org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor">
						<property name="corePoolSize" value="8" />
						<property name="maxPoolSize" value="12" />
					</bean>
				</property>
				<property name="step" ref="twCrdBoocDataProcessStep" />
				<property name="gridSize" value="8" />
			</bean>
		</property>
	</bean>	

	<bean id="twCrdBoocPartitioner" class="com.citi.retail.optima.etl.batch.job.infra.FlatFileDataPartitioner" scope="step">
		<property name="directoryName" value="#{#getInputFilePath(jobParameters[COUNTRYPRODUCT])}" />
		<property name= "originalFile" value="#{#getInputFilePath(jobParameters[COUNTRYPRODUCT])}" />
		<property name="splitFile" value="#{#getInputFilePath(jobParameters[COUNTRYPRODUCT])}" />
		<property name="archvFile" value="#{#getArchiveFilePath(jobParameters[COUNTRYPRODUCT])}" />
		<property name="evalContext" ref="customEvaluationContext" /> 
		<property name="filePattern" value="#{jobParameters[BOOC]}"/> 
		<property name="noOfRecordsPerSplit" value="100000"/> 
						<property name="startTime" value="#{jobParameters[STRT_TIME]}"></property> 
		<property name="jobName" value="#{jobParameters[JOB_NAME]}"></property>
	</bean>	
	
	<batch:step id="twCrdBoocDataProcessStep">
		<batch:tasklet allow-start-if-complete="false">
			<batch:chunk reader="twCrdBoocCsvReader" processor="twCrdBoocAcqProcessor" writer="dataAcqWriter" commit-interval="1000" skip-limit="50000">
				<batch:skippable-exception-classes>
					<batch:include class="com.citi.retail.optima.etl.common.exception.OptimaRetailDataException" />
				</batch:skippable-exception-classes>
			</batch:chunk>
		</batch:tasklet>
	</batch:step>	
	
	<bean id="twCrdBoocCsvReader" class="org.springframework.batch.item.file.FlatFileItemReader" scope="step" lazy-init="true">
		<property name="linesToSkip" value="1"/>
		<property name="resource" value="#{stepExecutionContext[fileName]}"></property>
		<property name="lineMapper">
			<bean class="org.springframework.batch.item.file.mapping.DefaultLineMapper">
				<property name="lineTokenizer">
					<bean class="org.springframework.batch.item.file.transform.DelimitedLineTokenizer">						
						<property name="delimiter" value="|"/>
						<property name="names" 	value ="crdAcctNbr"/>
					</bean>
				</property>
				<property name="fieldSetMapper">
					<bean class="com.citi.retail.optima.etl.batch.job.mapper.TwCrdBoocFieldSetMapper">
					</bean>
				</property>
			</bean>
		</property>
	</bean>
	
	<bean id="twCrdBoocAcqProcessor" class="com.citi.retail.optima.etl.batch.job.processor.da.TwSupportingDataProcessor" scope="step">
		<property name="dataService" ref="twDataService"/>
		<property name="preProcessMapName" value="twCrdBoocDataProcessStep"/>
	</bean>
	
</beans>